{"version":3,"sources":["./src/app/pages/register/register.component.html","./src/app/pages/register/register.component.scss","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.module.ts"],"names":[],"mappings":"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","file":"pages-register-register-module-es2015.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\r\\n            <mat-card [style.max-width.px]=\\\"500\\\">\\r\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n                    <h1 class=\\\"uppercase\\\">{{'COMMON.REGISTRATION' | translate }}</h1>\\r\\n                    <a mat-button [routerLink]=\\\"['/login', action]\\\" color=\\\"accent\\\"\\r\\n                        class=\\\"w-100\\\">{{'COMMON.NOTNEW_SIGN_IN' | translate }}</a>\\r\\n                </div>\\r\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\">\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                        <mat-label>{{'COMMON.FIRST_NAME' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"{{'COMMON.FIRST_NAME' | translate }}\\\" formControlName=\\\"firstName\\\"\\r\\n                            required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.firstName.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                        <mat-label>{{'COMMON.LAST_NAME' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"{{'COMMON.LAST_NAME' | translate }}\\\" formControlName=\\\"lastName\\\"\\r\\n                            required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.lastName.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                        <mat-label> {{'COMMON.PHONE' | translate}}\\r\\n                        </mat-label>\\r\\n                        <input matInput placeholder=\\\"Tel.\\\" formControlName=\\\"phone\\\" required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.phone.errors?.required\\\">\\r\\n                            {{'VALIDATION.PHONE_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\r\\n                        <mat-label>{{'COMMON.E_MAIL' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">\\r\\n                            {{'VALIDATION.EMAIL_REQUIRED' | translate }}</mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">\\r\\n                            {{'VALIDATION.EMAIL_INVALID' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                        <mat-label>{{'COMMON.PASSWORD' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\"\\r\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">\\r\\n                            {{'VALIDATION.PASSWORD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">\\r\\n                            {{'VALIDATION.MINIMUM_LENGTH' | translate }} 6</mat-error>\\r\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                        <mat-label>{{'COMMON.CONFIRM_PASSWORD' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\"\\r\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}</mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">\\r\\n                            {{'VALIDATION.PASSWORD_NOT_MATCH' | translate }}</mat-error>\\r\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-form-field>\\r\\n                    <mat-radio-group formControlName=\\\"sex\\\" class=\\\"my-3\\\">\\r\\n                        <mat-radio-button value=\\\"F\\\">\\r\\n                            {{'COMMON.MALE' | translate }}\\r\\n                        </mat-radio-button>&nbsp;&nbsp;\\r\\n                        <mat-radio-button value=\\\"M\\\">\\r\\n                            {{'COMMON.FEMALE' | translate }}\\r\\n                        </mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                    <br />\\r\\n                    <mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">\\r\\n                        {{'COMMON.RECEIVE_NEWSLETTER' | translate }}\\r\\n                    </mat-slide-toggle>\\r\\n                    <div class=\\\"text-center mt-2\\\">\\r\\n                        <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\r\\n                            {{'COMMON.REGISTER' | translate }}\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\" *ngIf=\\\"error\\\">\\r\\n                        <a mat-button color=\\\"accent\\\" class=\\\"w-100\\\">{{error}}</a>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div class=\\\"divider mt-4\\\"></div>\\r\\n                <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n                    <small class=\\\"my-3\\\">{{'MESSAGE.AGREEMENT' | translate }} <a mat-button\\r\\n                            routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\"\\r\\n                            class=\\\"mx-2\\\">{{'COMMON.TERMS_CONDITIONS' | translate }}</a>\\r\\n                    </small>\\r\\n                </mat-card-actions>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { TokenStorage } from 'src/app/token.storage';\r\nimport { User } from 'src/app/app.models';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n  public hide = true;\r\n  error = '';\r\n  public action = 0;\r\n  public userGroups = [];\r\n  constructor(public fb: FormBuilder,\r\n    public router: Router,\r\n    private tokenStorage: TokenStorage,\r\n    public snackBar: MatSnackBar,\r\n    public translate: TranslateService,\r\n    public appService: AppService,\r\n    private route: ActivatedRoute) {\r\n\r\n    this.route.params.subscribe(params => {\r\n      this.action = params.action;\r\n      console.log('action =' + this.action);\r\n    });\r\n\r\n    if (this.translate.currentLang === 'fr') {\r\n      this.userGroups = [\r\n        { id: 4, name: 'Client', type: 'UserGroup' },\r\n        { id: 5, name: 'Editeur', type: 'UserGroup' },\r\n        { id: 100, name: 'Autre', type: 'UserGroup' }\r\n      ];\r\n    } else {\r\n      this.userGroups = [\r\n        { id: 4, name: 'Client', type: 'UserGroup' },\r\n        { id: 5, name: 'Editor', type: 'UserGroup' },\r\n        { id: 100, name: 'Other', type: 'UserGroup' }\r\n      ];\r\n    }\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.fb.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      sex: ['', Validators.required],\r\n      phone: ['', Validators.required],\r\n      // userName: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      email: ['', Validators.compose([Validators.required, emailValidator])],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n      receiveNewsletter: true\r\n    }, { validator: matchingPasswords('password', 'confirmPassword') });\r\n  }\r\n\r\n  public onRegisterFormSubmit(values: User): void {\r\n    if (this.registerForm.valid) {\r\n      console.log(values);\r\n      const user: User = values;\r\n      user.type = 'User';\r\n      console.log(user);\r\n      this.appService.saveUserAndLogin(user)\r\n        .subscribe(data => {\r\n          if (data.token === 'E') {\r\n            this.translate.get(['VALIDATION.EMAIL_USED', 'COMMON.ERROR']).subscribe(res => {\r\n              this.error = res['VALIDATION.EMAIL_USED'];\r\n            });\r\n          } else if (data.token === 'S') {\r\n            this.translate.get(['MESSAGE.ERROR_OCCURRED', 'COMMON.ERROR']).subscribe(res => {\r\n              this.error = res['MESSAGE.ERROR_OCCURRED'];\r\n            });\r\n          } else {\r\n            this.tokenStorage.saveAuthData(data);\r\n            this.appService.updateToken();\r\n            console.log('Token = ' + this.tokenStorage.getToken());\r\n            console.log('action = '+this.action);\r\n            if (this.action == 1) {\r\n              this.router.navigate(['/submit-project/0']);\r\n            } else {\r\n              this.router.navigate(['/account/user/'+this.tokenStorage.getUserId()]);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n"],"sourceRoot":"webpack:///"}