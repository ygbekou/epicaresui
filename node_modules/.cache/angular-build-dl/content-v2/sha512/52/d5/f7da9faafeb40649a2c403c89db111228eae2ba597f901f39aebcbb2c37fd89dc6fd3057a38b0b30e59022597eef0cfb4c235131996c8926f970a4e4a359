{"version":3,"sources":["webpack:///src/app/pages/payment/payment.component.html","webpack:///src/app/pages/payment/payment.component.ts","webpack:///src/app/pages/payment/payment.module.ts"],"names":["PaymentComponent","appService","appSettings","translate","tokenStorage","activatedRoute","transaction","result","saveEvent","action","console","log","params","subscribe","projectId","getActiveProjects","setTimeout","setStripeSecret","currencyCode","getObject","toPromise","then","stripe","Stripe","publishableKey","saveWithUrl","data","setupElements","document","querySelector","disabled","getElementById","removeAttribute","form","addEventListener","handleCardSave","bind","elements","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","card","create","element","mount","clientSecret","event","preventDefault","setAttribute","submitPayment","myStepper","save","getUserId","processResult","myResult","saveFct","userId","errors","confirmCardPayment","payment_method","error","get","res","messages","selected","completed","next","parameters","push","getAllByCriteriaWithFiles","projectOptions","filteredProjectOptions","p","id","Number","currentProjectOption","title","project","undefined","modifiedBy","user","io","length","val","filterValue","toLowerCase","filter","startsWith","previous","selectedIndex","createPaymentIntent","selector","template","routes","path","component","pathMatch","PaymentModule","declarations","exports","imports","forChild"],"mappings":"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","file":"pages-payment-payment-module-es5.js","sourcesContent":["export default \"<div class=\\\"theme-container\\\">\\r\\n\\r\\n  <mat-horizontal-stepper [linear]=\\\"true\\\" *ngIf=\\\"action === 'processing'\\\" #stepper>\\r\\n    <mat-step completed=\\\"false\\\">\\r\\n      <ng-template matStepLabel>{{'COMMON.PROJECT'|translate}}</ng-template>\\r\\n      <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n          <mat-label> {{'COMMON.PROJECT' | translate}}</mat-label>\\r\\n          <input type=\\\"text\\\" placeholder=\\\"{{'COMMON.SELECT_PROJECT'|translate}}\\\" aria-label=\\\"Number\\\"\\r\\n            name=\\\"currentProjectOption\\\" matInput [matAutocomplete]=\\\"projectOptionAuto\\\"\\r\\n            [(ngModel)]=\\\"currentProjectOption\\\" required (ngModelChange)=\\\"filterProjectOptions(currentProjectOption)\\\"\\r\\n            [disabled]=\\\"projectId && projectId !== 0\\\">\\r\\n          <mat-icon matSuffix>keyboard_arrow_down</mat-icon>\\r\\n          <mat-autocomplete id=\\\"projOption\\\" #projectOptionAuto=\\\"matAutocomplete\\\">\\r\\n            <mat-option *ngFor=\\\"let pOption of filteredProjectOptions \\\" [value]=\\\"pOption.title\\\"\\r\\n              (onSelectionChange)=\\\"transaction.project = pOption;\\\">\\r\\n              {{pOption.title}}\\r\\n            </mat-option>\\r\\n          </mat-autocomplete>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxLayout=\\\"row wrap\\\">\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <button mat-raised-button color=\\\"secondary\\\" (click)=\\\"goBack()\\\" type=\\\"button\\\">Back</button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"goForward()\\\" style=\\\"float: right;\\\"\\r\\n            [disabled]=\\\"!transaction.project\\\" type=\\\"button\\\">Next</button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </mat-step>\\r\\n    <mat-step completed=\\\"false\\\">\\r\\n      <ng-template matStepLabel>{{'COMMON.AMOUNT'|translate}}</ng-template>\\r\\n      <div fxLayout=\\\"row wrap\\\">\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n            <mat-label> {{'COMMON.AMOUNT' | translate}}</mat-label>\\r\\n            <input matInput type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"amount\\\" [(ngModel)]=\\\"transaction.amount\\\" name=\\\"amount\\\"\\r\\n              #amount=\\\"ngModel\\\" required>\\r\\n            <mat-error *ngIf=\\\"amount.invalid\\\" severity=\\\"error\\\">\\r\\n              {{ 'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n            </mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mb-3\\\">\\r\\n            <mat-label>{{'COMMON.CURRENCY' | translate}}</mat-label>\\r\\n            <mat-select placeholder=\\\"{{'COMMON.SELECT' | translate}}\\\" [compareWith]=\\\"compareObjects\\\" id=\\\"currency\\\"\\r\\n              name=\\\"currency\\\" [(ngModel)]=\\\"transaction.currencyCode\\\">\\r\\n              <mat-option [value]=\\\"'USD'\\\">\\r\\n                USD\\r\\n              </mat-option>\\r\\n              <mat-option [value]=\\\"'XOF'\\\">\\r\\n                CFA\\r\\n              </mat-option>\\r\\n              <mat-option [value]=\\\"'EUR'\\\">\\r\\n                EUR\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div fxLayout=\\\"row wrap\\\">\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <button mat-raised-button color=\\\"secondary\\\" (click)=\\\"goBack()\\\" type=\\\"button\\\">Back</button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"goForward()\\\" style=\\\"float: right;\\\"\\r\\n            [disabled]=\\\"amount.invalid\\\" type=\\\"button\\\">Next</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-step>\\r\\n    <mat-step>\\r\\n      <ng-template matStepLabel>{{'COMMON.PAY'|translate}}</ng-template>\\r\\n\\r\\n      <mat-radio-group [(ngModel)]=\\\"transaction.paymentMethod\\\">\\r\\n        <mat-radio-button value=\\\"CARD\\\" *ngIf=\\\"appService.company.acceptCardPayment\\\" style=\\\"margin-right: 50px;\\\">\\r\\n          {{'COMMON.CREDIT_CARD'|translate}}\\r\\n        </mat-radio-button>\\r\\n        <mat-radio-button value=\\\"TMONEY\\\" *ngIf=\\\"appService.company.acceptTmoneyPayment\\\" style=\\\"margin-right: 50px;\\\">\\r\\n          TMoney\\r\\n        </mat-radio-button>\\r\\n        <mat-radio-button value=\\\"FLOOZ\\\" *ngIf=\\\"appService.company.acceptFloozPayment\\\" style=\\\"margin-right: 50px;\\\">\\r\\n          Flooz\\r\\n        </mat-radio-button>\\r\\n      </mat-radio-group>\\r\\n\\r\\n      <br />\\r\\n      <br />\\r\\n\\r\\n      <div [hidden]=\\\"transaction.paymentMethod !== 'CARD'\\\">\\r\\n        <form id=\\\"payment-form\\\">\\r\\n          <div id=\\\"card-element\\\">\\r\\n            <!--Stripe.js injects the Card Element-->\\r\\n          </div>\\r\\n          <br />\\r\\n          <br />\\r\\n          <button id=\\\"submit\\\" mat-raised-button color=\\\"primary\\\">\\r\\n            <div class=\\\"spinner hidden\\\" id=\\\"spinner\\\"></div>\\r\\n            <span id=\\\"button-text\\\">{{'COMMON.PAY'|translate}}</span>\\r\\n            <!-- <mat-icon>save</mat-icon> -->\\r\\n            <span id=\\\"order-amount\\\"></span>\\r\\n          </button>\\r\\n        </form>\\r\\n      </div>\\r\\n\\r\\n      <div [hidden]=\\\"transaction.paymentMethod !== 'TMONEY' && transaction.paymentMethod !== 'FLOOZ'\\\">\\r\\n        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n          <mat-label> {{'COMMON.PHONE' | translate}}</mat-label>\\r\\n          <input matInput type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"phone\\\" [(ngModel)]=\\\"transaction.phone\\\" name=\\\"phone\\\"\\r\\n            #phone=\\\"ngModel\\\" required>\\r\\n          <mat-error *ngIf=\\\"phone.invalid\\\" severity=\\\"error\\\">\\r\\n            {{ 'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n          </mat-error>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <div fxLayout=\\\"row wrap\\\">\\r\\n          <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"100\\\" class=\\\"p-3\\\">\\r\\n            <div class=\\\"text-center mt-2\\\">\\r\\n              <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\"\\r\\n                (click)=\\\"saveTransaction()\\\">\\r\\n                <span class=\\\"mx-1 uppercase\\\">{{'COMMON.PAY' | translate}}</span>\\r\\n              </button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-step>\\r\\n    <mat-step>\\r\\n\\r\\n      <mat-error *ngIf=\\\"errors\\\" severity=\\\"error\\\">\\r\\n        <h3>{{ errors }}</h3>\\r\\n      </mat-error>\\r\\n\\r\\n      <mat-error *ngIf=\\\"messages\\\" severity=\\\"message\\\">\\r\\n        <h3>{{ messages }}</h3>\\r\\n      </mat-error>\\r\\n\\r\\n      <mat-spinner *ngIf=\\\"!messages && !errors\\\"> Payment processing. Please don't close ...</mat-spinner>\\r\\n\\r\\n      <div fxLayout=\\\"row wrap\\\">\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\" class=\\\"p-3\\\">\\r\\n          <mat-label> {{'COMMON.PROJECT' | translate}}: {{transaction.project.title}} </mat-label>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\" class=\\\"p-3\\\">\\r\\n          <mat-label> {{'COMMON.AMOUNT' | translate}}: {{transaction.amount}} </mat-label>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"33\\\" class=\\\"p-3\\\">\\r\\n          <mat-label> {{'COMMON.CURRENCY' | translate}}: {{transaction.currencyCode}} </mat-label>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </mat-step>\\r\\n  </mat-horizontal-stepper>\\r\\n\\r\\n  <div fxLayout=\\\"row wrap\\\" *ngIf=\\\"action === 'complete'\\\" style=\\\"height: 100px;\\\">\\r\\n    <mat-error *ngIf=\\\"errors\\\" severity=\\\"error\\\">\\r\\n        <h3>{{ errors }}</h3>\\r\\n      </mat-error>\\r\\n\\r\\n      <mat-error *ngIf=\\\"messages\\\" severity=\\\"message\\\">\\r\\n        <h3>{{ messages }}</h3>\\r\\n      </mat-error>\\r\\n  </div>\\r\\n\\r\\n</div>\";","import { Component, OnInit, EventEmitter, Output, AfterViewInit, ViewChild, Input } from '@angular/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { Transaction, User, Project } from 'src/app/app.models';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AppSettings } from 'src/app/app.settings';\r\nimport { BaseComponent } from 'src/app/shared/baseComponent';\r\nimport { TokenStorage } from 'src/app/token.storage';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatStepper } from '@angular/material/stepper';\r\n\r\ndeclare var Stripe: any;\r\n\r\n@Component({\r\n  selector: 'app-payment-component',\r\n  templateUrl: './payment.component.html'\r\n})\r\nexport class PaymentComponent extends BaseComponent implements OnInit, AfterViewInit {\r\n\r\n  @ViewChild('stepper') private myStepper: MatStepper;\r\n\r\n  transaction: Transaction = new Transaction();\r\n  result = {};\r\n  @Output() saveEvent = new EventEmitter<any>();\r\n\r\n  currentProjectOption: string;\r\n  projectOptions: Project[];\r\n  filteredProjectOptions: Project[];\r\n\r\n  stripe;\r\n  errors: string;\r\n  data: any;\r\n\r\n  @Input()\r\n  projectId: number;\r\n\r\n  @Input()\r\n  eventId: number;\r\n\r\n  action = 'processing';\r\n\r\n\r\n  constructor(public appService: AppService,\r\n    public appSettings: AppSettings,\r\n    protected translate: TranslateService,\r\n    protected tokenStorage: TokenStorage,\r\n    private activatedRoute: ActivatedRoute) {\r\n\r\n    super(translate, tokenStorage);\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log('I am here ...')\r\n    this.activatedRoute.params.subscribe(params => {\r\n      if (params.projectId !== 0) {\r\n        this.projectId = params.projectId;\r\n      }\r\n    });\r\n    this.getActiveProjects();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setStripeSecret();\r\n    }, 500);\r\n\r\n    this.transaction.currencyCode = 'USD';\r\n  }\r\n\r\n  setStripeSecret() {\r\n    this.appService.getObject('/service/Payment/stripe-key').toPromise()\r\n      .then(result => {\r\n        this.stripe = Stripe(result.publishableKey);\r\n      });\r\n  }\r\n\r\n  createPaymentIntent() {\r\n\r\n    this.appService.saveWithUrl('/service/Payment/clientSecret', this.transaction).toPromise()\r\n      .then(result => {\r\n        return result;\r\n      })\r\n      .then(data => {\r\n        return this.setupElements(data);\r\n      })\r\n      .then(data => {\r\n        this.data = data;\r\n        document.querySelector('button').disabled = false;\r\n        document.getElementById('submit').removeAttribute('disabled');\r\n\r\n        const form = document.getElementById('payment-form');\r\n        form.addEventListener('submit', this.handleCardSave.bind(this));\r\n      });\r\n  }\r\n\r\n  setupElements(data) {\r\n    // this.stripe = Stripe(data.publishableKey);\r\n\r\n    /* ------- Set up Stripe Elements to use in checkout form ------- */\r\n    const elements = this.stripe.elements();\r\n    const style = {\r\n      base: {\r\n        color: '#32325d',\r\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n        fontSmoothing: 'antialiased',\r\n        fontSize: '16px',\r\n        '::placeholder': {\r\n          color: '#aab7c4'\r\n        }\r\n      },\r\n      invalid: {\r\n        color: '#fa755a',\r\n        iconColor: '#fa755a'\r\n      }\r\n    };\r\n\r\n    const card = elements.create('card', { style });\r\n    const element = document.getElementById('card-element')\r\n    card.mount('#card-element');\r\n\r\n    return {\r\n      stripe: this.stripe,\r\n      card,\r\n      clientSecret: data.clientSecret\r\n    };\r\n  }\r\n\r\n  handleCardSave(event) {\r\n    event.preventDefault();\r\n    document.getElementById('submit').setAttribute('disabled', 'disabled');\r\n    this.submitPayment(this.data.stripe, this.data.card, this.data.clientSecret, this.translate,\r\n      this.result, this.myStepper, this.save, this.appService, this.transaction, this.tokenStorage.getUserId(), this.processResult);\r\n  }\r\n\r\n  submitPayment(stripe, card, clientSecret, translate, myResult, myStepper, saveFct, appService, transaction, userId, processResult) {\r\n    this.errors = '';\r\n    stripe\r\n      .confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card\r\n        }\r\n      })\r\n      .then(function (result) {\r\n        if (result.error) {\r\n          // Show error to your customer\r\n          //showError(result.error.message);\r\n          translate.get(['MESSAGE.CARD_PAYMENT_FAILED']).subscribe(res => {\r\n            myResult.messages = res['MESSAGE.CARD_PAYMENT_FAILED'];\r\n          });\r\n          document.getElementById('submit').setAttribute('disabled', 'disabled');\r\n        } else {\r\n          // The payment succeeded!\r\n          //orderComplete(result.paymentIntent.id);\r\n          translate.get(['MESSAGE.CARD_PAYMENT_SUCCEDED']).subscribe(res => {\r\n            myResult.messages = res['MESSAGE.CARD_PAYMENT_SUCCEDED'];\r\n          });\r\n          saveFct(appService, transaction, userId, translate, myResult);\r\n        }\r\n        myStepper.selected.completed = true;\r\n        myStepper.next();\r\n      });\r\n  }\r\n\r\n  public getActiveProjects() {\r\n    const parameters: string[] = [];\r\n    parameters.push('e.status = |status|1|Integer');\r\n    this.appService.getAllByCriteriaWithFiles('Project', parameters).subscribe((data: Project[]) => {\r\n      this.projectOptions = data;\r\n      this.filteredProjectOptions = data;\r\n\r\n      if (this.projectId) {\r\n        for (let p of this.projectOptions) {\r\n          if (p.id === Number(this.projectId)) {\r\n            this.currentProjectOption = p.title;\r\n            this.transaction.project = p;\r\n          }\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  save(appService, transaction, userId, translate, myResult) {\r\n\r\n    myResult.errors = undefined;\r\n    myResult.messages = undefined;\r\n\r\n    transaction.modifiedBy = +userId;\r\n    transaction.user = new User();\r\n    transaction.user.id = +userId;\r\n    transaction.io = 0;\r\n\r\n    appService.save(transaction, 'Transaction')\r\n      .subscribe(result => {\r\n        if (result.errors === null || result.errors.length === 0) {\r\n          translate.get(['MESSAGE.CARD_PAYMENT_SUCCEDED']).subscribe(res => {\r\n            myResult.messages = res['MESSAGE.CARD_PAYMENT_SUCCEDED'];\r\n          });\r\n        } else {\r\n          translate.get(['MESSAGE.CARD_PAYMENT_FAILED']).subscribe(res => {\r\n            myResult.messages = res['MESSAGE.CARD_PAYMENT_FAILED'];\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  filterProjectOptions(val) {\r\n    if (val) {\r\n      const filterValue = typeof val === 'string' ? val.toLowerCase() : val.title.toLowerCase();\r\n      this.filteredProjectOptions = this.projectOptions.filter(element => element.title.toLowerCase().startsWith(filterValue));\r\n    } else {\r\n      this.filteredProjectOptions = this.projectOptions;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.transaction = new Transaction();\r\n  }\r\n\r\n  goBack() {\r\n    this.myStepper.previous();\r\n  }\r\n\r\n  goForward() {\r\n    this.myStepper.selected.completed = true;\r\n    this.myStepper.next();\r\n\r\n    if (this.myStepper.selectedIndex === 2) {\r\n      this.createPaymentIntent();\r\n    }\r\n  }\r\n\r\n  saveTransaction() {\r\n\r\n    this.myStepper.next();\r\n    this.transaction.modifiedBy = +this.tokenStorage.getUserId();\r\n    this.transaction.user = new User();\r\n    this.transaction.user.id = +this.tokenStorage.getUserId();\r\n\r\n\r\n    this.appService.saveWithUrl('/service/Payment/saveTransaction', this.transaction)\r\n      .subscribe(data => {\r\n        if (data.errors === null || data.errors.length === 0) {\r\n          this.translate.get(['MESSAGE.CARD_PAYMENT_SUCCEDED']).subscribe(res => {\r\n            this.messages = res['MESSAGE.CARD_PAYMENT_SUCCEDED'];\r\n          });\r\n        } else {\r\n          this.translate.get(['MESSAGE.CARD_PAYMENT_FAILED', 'MESSAGE.' + data.errors[0]]).subscribe(res => {\r\n            this.errors = res['MESSAGE.' + data.errors[0]];\r\n          });\r\n        }\r\n        this.action = 'complete';\r\n        this.myStepper.selected.completed = true;\r\n        this.myStepper.next();\r\n      });\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { MatVideoModule } from 'mat-video';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { PaymentComponent } from './payment.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport const routes = [\r\n  { path: '', component: PaymentComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PaymentComponent\r\n  ],\r\n  exports: [\r\n    PaymentComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule,\r\n    RouterModule.forChild(routes),\r\n    AgmCoreModule,\r\n    MatVideoModule,\r\n    SharedModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class PaymentModule { }\r\n"]}