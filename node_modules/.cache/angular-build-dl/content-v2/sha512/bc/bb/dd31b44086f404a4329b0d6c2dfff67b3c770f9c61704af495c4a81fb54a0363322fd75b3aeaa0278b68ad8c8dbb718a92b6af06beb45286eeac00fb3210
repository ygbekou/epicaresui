{"version":3,"sources":["webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/register/register.component.scss","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts"],"names":["RegisterComponent","fb","router","tokenStorage","snackBar","translate","appService","route","hide","error","action","userGroups","params","subscribe","console","log","currentLang","id","name","type","registerForm","group","firstName","required","lastName","sex","phone","email","compose","password","confirmPassword","receiveNewsletter","validator","values","valid","user","saveUserAndLogin","data","token","get","res","saveAuthData","updateToken","getToken","navigate","getUserId","selector","template","routes","path","component","pathMatch","RegisterModule","declarations","imports","forChild"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\r\\n            <mat-card [style.max-width.px]=\\\"500\\\">\\r\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n                    <h1 class=\\\"uppercase\\\">{{'COMMON.REGISTRATION' | translate }}</h1>\\r\\n                    <a mat-button [routerLink]=\\\"['/login', action]\\\" color=\\\"accent\\\"\\r\\n                        class=\\\"w-100\\\">{{'COMMON.NOTNEW_SIGN_IN' | translate }}</a>\\r\\n                </div>\\r\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\">\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                        <mat-label>{{'COMMON.FIRST_NAME' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"{{'COMMON.FIRST_NAME' | translate }}\\\" formControlName=\\\"firstName\\\"\\r\\n                            required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.firstName.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                        <mat-label>{{'COMMON.LAST_NAME' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"{{'COMMON.LAST_NAME' | translate }}\\\" formControlName=\\\"lastName\\\"\\r\\n                            required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.lastName.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                        <mat-label> {{'COMMON.PHONE' | translate}}\\r\\n                        </mat-label>\\r\\n                        <input matInput placeholder=\\\"Tel.\\\" formControlName=\\\"phone\\\" required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.phone.errors?.required\\\">\\r\\n                            {{'VALIDATION.PHONE_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\r\\n                        <mat-label>{{'COMMON.E_MAIL' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">\\r\\n                            {{'VALIDATION.EMAIL_REQUIRED' | translate }}</mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">\\r\\n                            {{'VALIDATION.EMAIL_INVALID' | translate }}\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                        <mat-label>{{'COMMON.PASSWORD' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\"\\r\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">\\r\\n                            {{'VALIDATION.PASSWORD_REQUIRED' | translate }}\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">\\r\\n                            {{'VALIDATION.MINIMUM_LENGTH' | translate }} 6</mat-error>\\r\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                        <mat-label>{{'COMMON.CONFIRM_PASSWORD' | translate }}</mat-label>\\r\\n                        <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\"\\r\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">\\r\\n                            {{'VALIDATION.FIELD_REQUIRED' | translate }}</mat-error>\\r\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">\\r\\n                            {{'VALIDATION.PASSWORD_NOT_MATCH' | translate }}</mat-error>\\r\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                        </button>\\r\\n                    </mat-form-field>\\r\\n                    <mat-radio-group formControlName=\\\"sex\\\" class=\\\"my-3\\\">\\r\\n                        <mat-radio-button value=\\\"F\\\">\\r\\n                            {{'COMMON.MALE' | translate }}\\r\\n                        </mat-radio-button>&nbsp;&nbsp;\\r\\n                        <mat-radio-button value=\\\"M\\\">\\r\\n                            {{'COMMON.FEMALE' | translate }}\\r\\n                        </mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                    <br />\\r\\n                    <mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">\\r\\n                        {{'COMMON.RECEIVE_NEWSLETTER' | translate }}\\r\\n                    </mat-slide-toggle>\\r\\n                    <div class=\\\"text-center mt-2\\\">\\r\\n                        <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\r\\n                            {{'COMMON.REGISTER' | translate }}\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\" *ngIf=\\\"error\\\">\\r\\n                        <a mat-button color=\\\"accent\\\" class=\\\"w-100\\\">{{error}}</a>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div class=\\\"divider mt-4\\\"></div>\\r\\n                <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n                    <small class=\\\"my-3\\\">{{'MESSAGE.AGREEMENT' | translate }} <a mat-button\\r\\n                            routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\"\\r\\n                            class=\\\"mx-2\\\">{{'COMMON.TERMS_CONDITIONS' | translate }}</a>\\r\\n                    </small>\\r\\n                </mat-card-actions>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { TokenStorage } from 'src/app/token.storage';\r\nimport { User } from 'src/app/app.models';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n  public hide = true;\r\n  error = '';\r\n  public action = 0;\r\n  public userGroups = [];\r\n  constructor(public fb: FormBuilder,\r\n    public router: Router,\r\n    private tokenStorage: TokenStorage,\r\n    public snackBar: MatSnackBar,\r\n    public translate: TranslateService,\r\n    public appService: AppService,\r\n    private route: ActivatedRoute) {\r\n\r\n    this.route.params.subscribe(params => {\r\n      this.action = params.action;\r\n      console.log('action =' + this.action);\r\n    });\r\n\r\n    if (this.translate.currentLang === 'fr') {\r\n      this.userGroups = [\r\n        { id: 4, name: 'Client', type: 'UserGroup' },\r\n        { id: 5, name: 'Editeur', type: 'UserGroup' },\r\n        { id: 100, name: 'Autre', type: 'UserGroup' }\r\n      ];\r\n    } else {\r\n      this.userGroups = [\r\n        { id: 4, name: 'Client', type: 'UserGroup' },\r\n        { id: 5, name: 'Editor', type: 'UserGroup' },\r\n        { id: 100, name: 'Other', type: 'UserGroup' }\r\n      ];\r\n    }\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.fb.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      sex: ['', Validators.required],\r\n      phone: ['', Validators.required],\r\n      // userName: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      email: ['', Validators.compose([Validators.required, emailValidator])],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n      receiveNewsletter: true\r\n    }, { validator: matchingPasswords('password', 'confirmPassword') });\r\n  }\r\n\r\n  public onRegisterFormSubmit(values: User): void {\r\n    if (this.registerForm.valid) {\r\n      console.log(values);\r\n      const user: User = values;\r\n      user.type = 'User';\r\n      console.log(user);\r\n      this.appService.saveUserAndLogin(user)\r\n        .subscribe(data => {\r\n          if (data.token === 'E') {\r\n            this.translate.get(['VALIDATION.EMAIL_USED', 'COMMON.ERROR']).subscribe(res => {\r\n              this.error = res['VALIDATION.EMAIL_USED'];\r\n            });\r\n          } else if (data.token === 'S') {\r\n            this.translate.get(['MESSAGE.ERROR_OCCURRED', 'COMMON.ERROR']).subscribe(res => {\r\n              this.error = res['MESSAGE.ERROR_OCCURRED'];\r\n            });\r\n          } else {\r\n            this.tokenStorage.saveAuthData(data);\r\n            this.appService.updateToken();\r\n            console.log('Token = ' + this.tokenStorage.getToken());\r\n            console.log('action = '+this.action);\r\n            if (this.action == 1) {\r\n              this.router.navigate(['/submit-project/0']);\r\n            } else {\r\n              this.router.navigate(['/account/user/'+this.tokenStorage.getUserId()]);\r\n            }\r\n\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n"]}