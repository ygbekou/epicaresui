import { OnDestroy, OnInit, OnChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { GalleryConfig } from '../models/config.model';
import { SliderState } from '../models/slider.model';
import * as ɵngcc0 from '@angular/core';
export declare class GallerySliderComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    private platform;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Stream that emits when the view is re-sized */
    private _resizeSub$;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when item is clicked */
    itemClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Item zoom */
    readonly zoom: {
        transform: string;
    };
    constructor(_el: ElementRef, _zone: NgZone, platform: Object);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GallerySliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GallerySliderComponent, "gallery-slider", never, { "state": "state"; "config": "config"; }, { "action": "action"; "itemClick": "itemClick"; "error": "error"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1zbGlkZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhbGxlcnktc2xpZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBPbkNoYW5nZXMsIE5nWm9uZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHYWxsZXJ5U3RhdGUsIEdhbGxlcnlFcnJvciB9IGZyb20gJy4uL21vZGVscy9nYWxsZXJ5Lm1vZGVsJztcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IFNsaWRlclN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL3NsaWRlci5tb2RlbCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHYWxsZXJ5U2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIC8qKiBTbGlkaW5nIHdvcmtlciAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3NsaWRpbmdXb3JrZXIkO1xuICAgIC8qKiBIYW1tZXJKUyBpbnN0YW5jZSAqL1xuICAgIHByaXZhdGUgX2hhbW1lcjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgdmlldyBpcyByZS1zaXplZCAqL1xuICAgIHByaXZhdGUgX3Jlc2l6ZVN1YiQ7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHNsaWRpbmcgc3RhdGUgKi9cbiAgICBzbGlkZXJTdGF0ZSQ6IE9ic2VydmFibGU8U2xpZGVyU3RhdGU+O1xuICAgIC8qKiBHYWxsZXJ5IHN0YXRlICovXG4gICAgc3RhdGU6IEdhbGxlcnlTdGF0ZTtcbiAgICAvKiogR2FsbGVyeSBjb25maWcgKi9cbiAgICBjb25maWc6IEdhbGxlcnlDb25maWc7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIGFjdGl2ZSBpdGVtIHNob3VsZCBjaGFuZ2UgKi9cbiAgICBhY3Rpb246IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudW1iZXI+O1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGl0ZW0gaXMgY2xpY2tlZCAqL1xuICAgIGl0ZW1DbGljazogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzICovXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxHYWxsZXJ5RXJyb3I+O1xuICAgIC8qKiBJdGVtIHpvb20gKi9cbiAgICByZWFkb25seSB6b29tOiB7XG4gICAgICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoX2VsOiBFbGVtZW50UmVmLCBfem9uZTogTmdab25lLCBwbGF0Zm9ybTogT2JqZWN0KTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHNsaWRpbmcgc3RhdGUgdG8gc3R5bGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRTbGlkZXJTdHlsZXM7XG4gICAgcHJpdmF0ZSB2ZXJ0aWNhbFBhbjtcbiAgICBwcml2YXRlIGhvcml6b250YWxQYW47XG4gICAgcHJpdmF0ZSBuZXh0O1xuICAgIHByaXZhdGUgcHJldjtcbiAgICBwcml2YXRlIHVwZGF0ZVNsaWRlcjtcbn1cbiJdfQ==