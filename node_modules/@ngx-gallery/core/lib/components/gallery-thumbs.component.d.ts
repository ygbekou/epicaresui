import { OnDestroy, OnInit, OnChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryConfig } from '../models/config.model';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { SliderState } from '../models/slider.model';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryThumbsComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Current slider position in free sliding mode */
    private _freeModeCurrentOffset;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when thumb is clicked */
    thumbClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Host height */
    height: string;
    /** Host width */
    width: string;
    constructor(_el: ElementRef, _zone: NgZone);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Sliding strict mode
     */
    private strictMode;
    /**
     * Sliding free mode
     */
    private freeMode;
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     */
    private minFreeScrollExceeded;
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     */
    private maxFreeScrollExceeded;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryThumbsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryThumbsComponent, "gallery-thumbs", never, { "state": "state"; "config": "config"; }, { "action": "action"; "thumbClick": "thumbClick"; "error": "error"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS10aHVtYnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhbGxlcnktdGh1bWJzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBPbkNoYW5nZXMsIE5nWm9uZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBHYWxsZXJ5U3RhdGUsIEdhbGxlcnlFcnJvciB9IGZyb20gJy4uL21vZGVscy9nYWxsZXJ5Lm1vZGVsJztcbmltcG9ydCB7IFNsaWRlclN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL3NsaWRlci5tb2RlbCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHYWxsZXJ5VGh1bWJzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICAvKiogU2xpZGluZyB3b3JrZXIgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zbGlkaW5nV29ya2VyJDtcbiAgICAvKiogSGFtbWVySlMgaW5zdGFuY2UgKi9cbiAgICBwcml2YXRlIF9oYW1tZXI7XG4gICAgLyoqIEN1cnJlbnQgc2xpZGVyIHBvc2l0aW9uIGluIGZyZWUgc2xpZGluZyBtb2RlICovXG4gICAgcHJpdmF0ZSBfZnJlZU1vZGVDdXJyZW50T2Zmc2V0O1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBzbGlkaW5nIHN0YXRlICovXG4gICAgc2xpZGVyU3RhdGUkOiBPYnNlcnZhYmxlPFNsaWRlclN0YXRlPjtcbiAgICAvKiogR2FsbGVyeSBzdGF0ZSAqL1xuICAgIHN0YXRlOiBHYWxsZXJ5U3RhdGU7XG4gICAgLyoqIEdhbGxlcnkgY29uZmlnICovXG4gICAgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSBhY3RpdmUgaXRlbSBzaG91bGQgY2hhbmdlICovXG4gICAgYWN0aW9uOiBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aHVtYiBpcyBjbGlja2VkICovXG4gICAgdGh1bWJDbGljazogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzICovXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxHYWxsZXJ5RXJyb3I+O1xuICAgIC8qKiBIb3N0IGhlaWdodCAqL1xuICAgIGhlaWdodDogc3RyaW5nO1xuICAgIC8qKiBIb3N0IHdpZHRoICovXG4gICAgd2lkdGg6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF96b25lOiBOZ1pvbmUpO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNsaWRpbmcgc3RyaWN0IG1vZGVcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0cmljdE1vZGU7XG4gICAgLyoqXG4gICAgICogU2xpZGluZyBmcmVlIG1vZGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGZyZWVNb2RlO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBtaW5pbXVtIGZyZWUgc2Nyb2xsIGlzIGV4Y2VlZGVkICh1c2VkIGluIEJvdHRvbSwgTGVmdCBkaXJlY3Rpb25zKVxuICAgICAqL1xuICAgIHByaXZhdGUgbWluRnJlZVNjcm9sbEV4Y2VlZGVkO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBtYXhpbXVtIGZyZWUgc2Nyb2xsIGlzIGV4Y2VlZGVkICh1c2VkIGluIFRvcCwgUmlnaHQgZGlyZWN0aW9ucylcbiAgICAgKi9cbiAgICBwcml2YXRlIG1heEZyZWVTY3JvbGxFeGNlZWRlZDtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHNsaWRpbmcgc3RhdGUgdG8gc3R5bGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRTbGlkZXJTdHlsZXM7XG4gICAgcHJpdmF0ZSB2ZXJ0aWNhbFBhbjtcbiAgICBwcml2YXRlIGhvcml6b250YWxQYW47XG4gICAgcHJpdmF0ZSBuZXh0O1xuICAgIHByaXZhdGUgcHJldjtcbiAgICBwcml2YXRlIHVwZGF0ZVNsaWRlcjtcbn1cbiJdfQ==