import { OnInit, OnChanges, OnDestroy, SimpleChanges, TemplateRef, EventEmitter } from '@angular/core';
import { Gallery } from '../services/gallery.service';
import { GalleryRef } from '../services/gallery-ref';
import { GalleryError, GalleryItem, GalleryState } from '../models/gallery.model';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryComponent implements OnInit, OnChanges, OnDestroy {
    private _gallery;
    galleryRef: GalleryRef;
    id: string;
    items: GalleryItem[];
    nav: boolean;
    dots: boolean;
    loop: boolean;
    thumb: boolean;
    zoomOut: number;
    counter: boolean;
    dotsSize: number;
    autoPlay: boolean;
    gestures: boolean;
    thumbWidth: number;
    thumbHeight: number;
    disableThumb: boolean;
    panSensitivity: number;
    playerInterval: number;
    itemTemplate: TemplateRef<any>;
    thumbTemplate: TemplateRef<any>;
    thumbMode: 'strict' | 'free';
    imageSize: 'cover' | 'contain';
    dotsPosition: 'top' | 'bottom';
    counterPosition: 'top' | 'bottom';
    slidingDirection: 'horizontal' | 'vertical';
    loadingStrategy: 'preload' | 'lazy' | 'default';
    thumbPosition: 'top' | 'left' | 'right' | 'bottom';
    /** Destroy gallery ref on component destroy event */
    destroyRef: boolean;
    /** Skip initializing the config with components inputs (Lightbox mode) */
    skipInitConfig: boolean;
    itemClick: EventEmitter<number>;
    thumbClick: EventEmitter<number>;
    playingChange: EventEmitter<GalleryState>;
    indexChange: EventEmitter<GalleryState>;
    itemsChange: EventEmitter<GalleryState>;
    error: EventEmitter<GalleryError>;
    private _itemClick$;
    private _thumbClick$;
    private _itemChange$;
    private _indexChange$;
    private _playingChange$;
    private _playerListener$;
    constructor(_gallery: Gallery);
    private getConfig;
    onAction(i: string | number): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onItemClick(i: number): void;
    onThumbClick(i: number): void;
    onError(err: GalleryError): void;
    load(items: GalleryItem[]): void;
    add(item: GalleryItem, active?: boolean): void;
    addImage(data: any, active?: boolean): void;
    addVideo(data: any, active?: boolean): void;
    addIframe(data: any, active?: boolean): void;
    addYoutube(data: any, active?: boolean): void;
    remove(i: number): void;
    next(): void;
    prev(): void;
    set(i: number): void;
    reset(): void;
    play(interval?: number): void;
    stop(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryComponent, "gallery", never, { "nav": "nav"; "dots": "dots"; "loop": "loop"; "thumb": "thumb"; "zoomOut": "zoomOut"; "counter": "counter"; "dotsSize": "dotsSize"; "autoPlay": "autoPlay"; "gestures": "gestures"; "thumbWidth": "thumbWidth"; "thumbHeight": "thumbHeight"; "disableThumb": "disableThumb"; "panSensitivity": "panSensitivity"; "playerInterval": "playerInterval"; "itemTemplate": "itemTemplate"; "thumbTemplate": "thumbTemplate"; "thumbMode": "thumbMode"; "imageSize": "imageSize"; "dotsPosition": "dotsPosition"; "counterPosition": "counterPosition"; "slidingDirection": "slidingDirection"; "loadingStrategy": "loadingStrategy"; "thumbPosition": "thumbPosition"; "destroyRef": "destroyRef"; "skipInitConfig": "skipInitConfig"; "id": "id"; "items": "items"; }, { "itemClick": "itemClick"; "thumbClick": "thumbClick"; "playingChange": "playingChange"; "indexChange": "indexChange"; "itemsChange": "itemsChange"; "error": "error"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ2FsbGVyeS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2FsbGVyeSB9IGZyb20gJy4uL3NlcnZpY2VzL2dhbGxlcnkuc2VydmljZSc7XG5pbXBvcnQgeyBHYWxsZXJ5UmVmIH0gZnJvbSAnLi4vc2VydmljZXMvZ2FsbGVyeS1yZWYnO1xuaW1wb3J0IHsgR2FsbGVyeUVycm9yLCBHYWxsZXJ5SXRlbSwgR2FsbGVyeVN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL2dhbGxlcnkubW9kZWwnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2FsbGVyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2dhbGxlcnk7XG4gICAgZ2FsbGVyeVJlZjogR2FsbGVyeVJlZjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGl0ZW1zOiBHYWxsZXJ5SXRlbVtdO1xuICAgIG5hdjogYm9vbGVhbjtcbiAgICBkb3RzOiBib29sZWFuO1xuICAgIGxvb3A6IGJvb2xlYW47XG4gICAgdGh1bWI6IGJvb2xlYW47XG4gICAgem9vbU91dDogbnVtYmVyO1xuICAgIGNvdW50ZXI6IGJvb2xlYW47XG4gICAgZG90c1NpemU6IG51bWJlcjtcbiAgICBhdXRvUGxheTogYm9vbGVhbjtcbiAgICBnZXN0dXJlczogYm9vbGVhbjtcbiAgICB0aHVtYldpZHRoOiBudW1iZXI7XG4gICAgdGh1bWJIZWlnaHQ6IG51bWJlcjtcbiAgICBkaXNhYmxlVGh1bWI6IGJvb2xlYW47XG4gICAgcGFuU2Vuc2l0aXZpdHk6IG51bWJlcjtcbiAgICBwbGF5ZXJJbnRlcnZhbDogbnVtYmVyO1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0aHVtYlRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHRodW1iTW9kZTogJ3N0cmljdCcgfCAnZnJlZSc7XG4gICAgaW1hZ2VTaXplOiAnY292ZXInIHwgJ2NvbnRhaW4nO1xuICAgIGRvdHNQb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJztcbiAgICBjb3VudGVyUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbSc7XG4gICAgc2xpZGluZ0RpcmVjdGlvbjogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcbiAgICBsb2FkaW5nU3RyYXRlZ3k6ICdwcmVsb2FkJyB8ICdsYXp5JyB8ICdkZWZhdWx0JztcbiAgICB0aHVtYlBvc2l0aW9uOiAndG9wJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAnYm90dG9tJztcbiAgICAvKiogRGVzdHJveSBnYWxsZXJ5IHJlZiBvbiBjb21wb25lbnQgZGVzdHJveSBldmVudCAqL1xuICAgIGRlc3Ryb3lSZWY6IGJvb2xlYW47XG4gICAgLyoqIFNraXAgaW5pdGlhbGl6aW5nIHRoZSBjb25maWcgd2l0aCBjb21wb25lbnRzIGlucHV0cyAoTGlnaHRib3ggbW9kZSkgKi9cbiAgICBza2lwSW5pdENvbmZpZzogYm9vbGVhbjtcbiAgICBpdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHRodW1iQ2xpY2s6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHBsYXlpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxHYWxsZXJ5U3RhdGU+O1xuICAgIGluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8R2FsbGVyeVN0YXRlPjtcbiAgICBpdGVtc0NoYW5nZTogRXZlbnRFbWl0dGVyPEdhbGxlcnlTdGF0ZT47XG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxHYWxsZXJ5RXJyb3I+O1xuICAgIHByaXZhdGUgX2l0ZW1DbGljayQ7XG4gICAgcHJpdmF0ZSBfdGh1bWJDbGljayQ7XG4gICAgcHJpdmF0ZSBfaXRlbUNoYW5nZSQ7XG4gICAgcHJpdmF0ZSBfaW5kZXhDaGFuZ2UkO1xuICAgIHByaXZhdGUgX3BsYXlpbmdDaGFuZ2UkO1xuICAgIHByaXZhdGUgX3BsYXllckxpc3RlbmVyJDtcbiAgICBjb25zdHJ1Y3RvcihfZ2FsbGVyeTogR2FsbGVyeSk7XG4gICAgcHJpdmF0ZSBnZXRDb25maWc7XG4gICAgb25BY3Rpb24oaTogc3RyaW5nIHwgbnVtYmVyKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25JdGVtQ2xpY2soaTogbnVtYmVyKTogdm9pZDtcbiAgICBvblRodW1iQ2xpY2soaTogbnVtYmVyKTogdm9pZDtcbiAgICBvbkVycm9yKGVycjogR2FsbGVyeUVycm9yKTogdm9pZDtcbiAgICBsb2FkKGl0ZW1zOiBHYWxsZXJ5SXRlbVtdKTogdm9pZDtcbiAgICBhZGQoaXRlbTogR2FsbGVyeUl0ZW0sIGFjdGl2ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGFkZEltYWdlKGRhdGE6IGFueSwgYWN0aXZlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgYWRkVmlkZW8oZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKTogdm9pZDtcbiAgICBhZGRJZnJhbWUoZGF0YTogYW55LCBhY3RpdmU/OiBib29sZWFuKTogdm9pZDtcbiAgICBhZGRZb3V0dWJlKGRhdGE6IGFueSwgYWN0aXZlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVtb3ZlKGk6IG51bWJlcik6IHZvaWQ7XG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIHByZXYoKTogdm9pZDtcbiAgICBzZXQoaTogbnVtYmVyKTogdm9pZDtcbiAgICByZXNldCgpOiB2b2lkO1xuICAgIHBsYXkoaW50ZXJ2YWw/OiBudW1iZXIpOiB2b2lkO1xuICAgIHN0b3AoKTogdm9pZDtcbn1cbiJdfQ==