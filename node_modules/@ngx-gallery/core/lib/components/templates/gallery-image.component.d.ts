import { OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { DomSanitizer, SafeHtml, SafeStyle } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryImageComponent implements OnInit, OnDestroy {
    private _sanitizer;
    /** Stream that emits the state */
    private readonly _state;
    readonly state: import("rxjs").Observable<"failed" | "loading" | "success">;
    /** Progress value */
    progress: number;
    /** Is thumbnail */
    isThumbnail: boolean;
    /** Image source URL */
    src: string;
    /** Loaded image URL */
    imageUrl: SafeStyle;
    /** Custom loader template */
    loadingIcon: string;
    /** Custom loader safe template */
    loaderTemplate: SafeHtml;
    /** Custom error template */
    loadingError: string;
    /** Custom error safe template */
    errorTemplate: SafeHtml;
    /** Stream that emits when an error occurs */
    error: EventEmitter<Error>;
    /** loading error */
    loadError: Error;
    readonly imageLoadSuccess: boolean;
    readonly imageLoadFailed: boolean;
    constructor(_sanitizer: DomSanitizer);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onProgress({ loaded, total }: {
        loaded: number;
        total: number;
    }): void;
    onLoaded(blobUrl: string): void;
    onError(err: Error): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryImageComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryImageComponent, "gallery-image", never, { "isThumbnail": "isThumbnail"; "src": "src"; "loadingIcon": "loadingIcon"; "loadingError": "loadingError"; }, { "error": "error"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sLCBTYWZlU3R5bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdhbGxlcnlJbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9zYW5pdGl6ZXI7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHRoZSBzdGF0ZSAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3N0YXRlO1xuICAgIHJlYWRvbmx5IHN0YXRlOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8XCJmYWlsZWRcIiB8IFwibG9hZGluZ1wiIHwgXCJzdWNjZXNzXCI+O1xuICAgIC8qKiBQcm9ncmVzcyB2YWx1ZSAqL1xuICAgIHByb2dyZXNzOiBudW1iZXI7XG4gICAgLyoqIElzIHRodW1ibmFpbCAqL1xuICAgIGlzVGh1bWJuYWlsOiBib29sZWFuO1xuICAgIC8qKiBJbWFnZSBzb3VyY2UgVVJMICovXG4gICAgc3JjOiBzdHJpbmc7XG4gICAgLyoqIExvYWRlZCBpbWFnZSBVUkwgKi9cbiAgICBpbWFnZVVybDogU2FmZVN0eWxlO1xuICAgIC8qKiBDdXN0b20gbG9hZGVyIHRlbXBsYXRlICovXG4gICAgbG9hZGluZ0ljb246IHN0cmluZztcbiAgICAvKiogQ3VzdG9tIGxvYWRlciBzYWZlIHRlbXBsYXRlICovXG4gICAgbG9hZGVyVGVtcGxhdGU6IFNhZmVIdG1sO1xuICAgIC8qKiBDdXN0b20gZXJyb3IgdGVtcGxhdGUgKi9cbiAgICBsb2FkaW5nRXJyb3I6IHN0cmluZztcbiAgICAvKiogQ3VzdG9tIGVycm9yIHNhZmUgdGVtcGxhdGUgKi9cbiAgICBlcnJvclRlbXBsYXRlOiBTYWZlSHRtbDtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPEVycm9yPjtcbiAgICAvKiogbG9hZGluZyBlcnJvciAqL1xuICAgIGxvYWRFcnJvcjogRXJyb3I7XG4gICAgcmVhZG9ubHkgaW1hZ2VMb2FkU3VjY2VzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBpbWFnZUxvYWRGYWlsZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoX3Nhbml0aXplcjogRG9tU2FuaXRpemVyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25Qcm9ncmVzcyh7IGxvYWRlZCwgdG90YWwgfToge1xuICAgICAgICBsb2FkZWQ6IG51bWJlcjtcbiAgICAgICAgdG90YWw6IG51bWJlcjtcbiAgICB9KTogdm9pZDtcbiAgICBvbkxvYWRlZChibG9iVXJsOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uRXJyb3IoZXJyOiBFcnJvcik6IHZvaWQ7XG59XG4iXX0=