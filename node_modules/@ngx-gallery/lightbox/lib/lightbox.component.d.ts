import { ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { AnimationEvent } from '@angular/animations';
import { OverlayRef } from '@angular/cdk/overlay';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import * as ɵngcc0 from '@angular/core';
export declare class LightboxComponent {
    private _document;
    private _focusTrapFactory;
    private _elementRef;
    sanitizer: DomSanitizer;
    /** Gallery ref id */
    id: string;
    /** Overlay ref to close the lightbox */
    overlayRef: OverlayRef;
    /** Close button svg data */
    closeIcon: string;
    /** State of the lightbox animation. */
    state: 'void' | 'enter' | 'exit';
    /** The ARIA role of the lightbox element. */
    role: string;
    /** Aria label to assign to the lightbox element */
    ariaLabel: string;
    /** ID of the element that should be considered as the lightbox's label. */
    ariaLabelledBy: string;
    /** ID of the element that describes the lightbox. */
    ariaDescribedBy: string;
    /** The class that traps and manages focus within the lightbox. */
    private _focusTrap;
    /** Element that was focused before the lightbox was opened. Save this to restore upon close. */
    private _elementFocusedBeforeDialogWasOpened;
    constructor(_document: any, _focusTrapFactory: FocusTrapFactory, _elementRef: ElementRef, sanitizer: DomSanitizer);
    /** Callback, invoked whenever an animation on the host completes. */
    onAnimationDone(event: AnimationEvent): void;
    /** Moves the focus inside the focus trap. */
    private _trapFocus;
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    private _savePreviouslyFocusedElement;
    /** Restores focus to the element that was focused before the lightbox opened. */
    private _restoreFocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LightboxComponent, [{ optional: true; }, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LightboxComponent, "lightbox", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImxpZ2h0Ym94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEZvY3VzVHJhcEZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaWdodGJveENvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSBfZm9jdXNUcmFwRmFjdG9yeTtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHNhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIC8qKiBHYWxsZXJ5IHJlZiBpZCAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqIE92ZXJsYXkgcmVmIHRvIGNsb3NlIHRoZSBsaWdodGJveCAqL1xuICAgIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG4gICAgLyoqIENsb3NlIGJ1dHRvbiBzdmcgZGF0YSAqL1xuICAgIGNsb3NlSWNvbjogc3RyaW5nO1xuICAgIC8qKiBTdGF0ZSBvZiB0aGUgbGlnaHRib3ggYW5pbWF0aW9uLiAqL1xuICAgIHN0YXRlOiAndm9pZCcgfCAnZW50ZXInIHwgJ2V4aXQnO1xuICAgIC8qKiBUaGUgQVJJQSByb2xlIG9mIHRoZSBsaWdodGJveCBlbGVtZW50LiAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKiogQXJpYSBsYWJlbCB0byBhc3NpZ24gdG8gdGhlIGxpZ2h0Ym94IGVsZW1lbnQgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICAvKiogSUQgb2YgdGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyB0aGUgbGlnaHRib3gncyBsYWJlbC4gKi9cbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGRlc2NyaWJlcyB0aGUgbGlnaHRib3guICovXG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzdHJpbmc7XG4gICAgLyoqIFRoZSBjbGFzcyB0aGF0IHRyYXBzIGFuZCBtYW5hZ2VzIGZvY3VzIHdpdGhpbiB0aGUgbGlnaHRib3guICovXG4gICAgcHJpdmF0ZSBfZm9jdXNUcmFwO1xuICAgIC8qKiBFbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCB3YXMgb3BlbmVkLiBTYXZlIHRoaXMgdG8gcmVzdG9yZSB1cG9uIGNsb3NlLiAqL1xuICAgIHByaXZhdGUgX2VsZW1lbnRGb2N1c2VkQmVmb3JlRGlhbG9nV2FzT3BlbmVkO1xuICAgIGNvbnN0cnVjdG9yKF9kb2N1bWVudDogYW55LCBfZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSwgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHNhbml0aXplcjogRG9tU2FuaXRpemVyKTtcbiAgICAvKiogQ2FsbGJhY2ssIGludm9rZWQgd2hlbmV2ZXIgYW4gYW5pbWF0aW9uIG9uIHRoZSBob3N0IGNvbXBsZXRlcy4gKi9cbiAgICBvbkFuaW1hdGlvbkRvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICAvKiogTW92ZXMgdGhlIGZvY3VzIGluc2lkZSB0aGUgZm9jdXMgdHJhcC4gKi9cbiAgICBwcml2YXRlIF90cmFwRm9jdXM7XG4gICAgLyoqIFNhdmVzIGEgcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCB3YXMgb3BlbmVkLiAqL1xuICAgIHByaXZhdGUgX3NhdmVQcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ7XG4gICAgLyoqIFJlc3RvcmVzIGZvY3VzIHRvIHRoZSBlbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCBvcGVuZWQuICovXG4gICAgcHJpdmF0ZSBfcmVzdG9yZUZvY3VzO1xufVxuIl19