/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostListener, Input, Output } from "@angular/core";
import { EventService } from "../../services/event.service";
var MatVolumeControlComponent = /** @class */ (function () {
    function MatVolumeControlComponent(evt) {
        this.evt = evt;
        this.video = null;
        this.color = "primary";
        this.volume = 1;
        this.volumeChanged = new EventEmitter();
        this.muted = false;
        this.mutedChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.updateMuted(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVolumeControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.muted) {
            this.updateMuted(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setVolume = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.volume = value;
        this.video.volume = this.volume;
        this.volumeChanged.emit(this.volume);
        if (this.volume > 0) {
            this.setMuted(false);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setMuted = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.muted !== value) {
            this.toggleMuted();
        }
    };
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.toggleMuted = /**
     * @return {?}
     */
    function () {
        this.muted = !this.muted;
        this.updateMuted();
    };
    /**
     * @param {?=} emitChange
     * @return {?}
     */
    MatVolumeControlComponent.prototype.updateMuted = /**
     * @param {?=} emitChange
     * @return {?}
     */
    function (emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        if (this.video) {
            this.video.muted = this.muted;
        }
        if (emitChange) {
            this.mutedChanged.emit(this.muted);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVolumeControlComponent.prototype.onMuteKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleMuted();
            event.preventDefault();
        }
    };
    MatVolumeControlComponent.decorators = [
        { type: Component, args: [{
                    selector: "mat-volume-control",
                    template: "<div class=\"volume-control\">\r\n  <button mat-icon-button (click)=\"toggleMuted()\">\r\n    <mat-icon *ngIf=\"muted || volume === 0\">volume_off</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume > 0 && volume < 0.25\">volume_mute</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.25 && volume < 0.5\">volume_down</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.5\">volume_up</mat-icon>\r\n  </button>\r\n  <mat-slider class=\"volume-slider\" [color]=\"color\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\" (input)=\"setVolume($event.value)\"> </mat-slider>\r\n</div>\r\n",
                    styles: [".volume-control{display:inline}.volume-slider{margin-left:-15px}::ng-deep.mat-slider-thumb{border-color:transparent!important}::ng-deep.mat-slider-track-background{background-color:#d3d3d3!important;transform:translateX(0)!important}.volume-control .volume-slider{visibility:hidden;opacity:0;min-width:0;width:0;transition:visibility .2s,opacity .2s linear,width .2s linear}.volume-control:hover .volume-slider{visibility:visible;opacity:1;min-width:90px;width:90px;transition:opacity .2s linear,width .2s linear,min-width .2s linear}"]
                }] }
    ];
    /** @nocollapse */
    MatVolumeControlComponent.ctorParameters = function () { return [
        { type: EventService }
    ]; };
    MatVolumeControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        volume: [{ type: Input }],
        volumeChanged: [{ type: Output }],
        muted: [{ type: Input }],
        mutedChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onMuteKey: [{ type: HostListener, args: ["document:keyup.m", ["$event"],] }]
    };
    return MatVolumeControlComponent;
}());
export { MatVolumeControlComponent };
if (false) {
    /** @type {?} */
    MatVolumeControlComponent.prototype.video;
    /** @type {?} */
    MatVolumeControlComponent.prototype.color;
    /** @type {?} */
    MatVolumeControlComponent.prototype.volume;
    /** @type {?} */
    MatVolumeControlComponent.prototype.volumeChanged;
    /** @type {?} */
    MatVolumeControlComponent.prototype.muted;
    /** @type {?} */
    MatVolumeControlComponent.prototype.mutedChanged;
    /** @type {?} */
    MatVolumeControlComponent.prototype.keyboard;
    /**
     * @type {?}
     * @private
     */
    MatVolumeControlComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZvbHVtZS1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC12aWRlby8iLCJzb3VyY2VzIjpbImxpYi91aS9tYXQtdm9sdW1lLWNvbnRyb2wvbWF0LXZvbHVtZS1jb250cm9sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUc5SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUQ7SUFvQkUsbUNBQW9CLEdBQWlCO1FBQWpCLFFBQUcsR0FBSCxHQUFHLENBQWM7UUFkNUIsVUFBSyxHQUFxQixJQUFJLENBQUM7UUFFL0IsVUFBSyxHQUFpQixTQUFTLENBQUM7UUFFaEMsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUVWLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUU1QyxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBRWIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRTVDLGFBQVEsR0FBRyxJQUFJLENBQUM7SUFFZSxDQUFDOzs7O0lBRXpDLG1EQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFRCwrQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7OztJQUVELDZDQUFTOzs7O0lBQVQsVUFBVSxLQUFhO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7O0lBRUQsNENBQVE7Ozs7SUFBUixVQUFTLEtBQWM7UUFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtZQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7O0lBRUQsK0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsK0NBQVc7Ozs7SUFBWCxVQUFZLFVBQTBCO1FBQTFCLDJCQUFBLEVBQUEsaUJBQTBCO1FBQ3BDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDL0I7UUFFRCxJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7Ozs7O0lBR0QsNkNBQVM7Ozs7SUFEVCxVQUNVLEtBQW9CO1FBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7Z0JBckVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5Qiw2bEJBQWtEOztpQkFFbkQ7Ozs7Z0JBTlEsWUFBWTs7O3dCQVFsQixLQUFLO3dCQUVMLEtBQUs7eUJBRUwsS0FBSztnQ0FFTCxNQUFNO3dCQUVOLEtBQUs7K0JBRUwsTUFBTTsyQkFFTixLQUFLOzRCQTZDTCxZQUFZLFNBQUMsa0JBQWtCLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBTzlDLGdDQUFDO0NBQUEsQUF0RUQsSUFzRUM7U0FqRVkseUJBQXlCOzs7SUFDcEMsMENBQXdDOztJQUV4QywwQ0FBeUM7O0lBRXpDLDJDQUFvQjs7SUFFcEIsa0RBQXFEOztJQUVyRCwwQ0FBdUI7O0lBRXZCLGlEQUFxRDs7SUFFckQsNkNBQXlCOzs7OztJQUViLHdDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xuXG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZXZlbnQuc2VydmljZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibWF0LXZvbHVtZS1jb250cm9sXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vbWF0LXZvbHVtZS1jb250cm9sLmNvbXBvbmVudC5odG1sXCIsXG4gIHN0eWxlVXJsczogW1wiLi9tYXQtdm9sdW1lLWNvbnRyb2wuY29tcG9uZW50LnNjc3NcIl1cbn0pXG5leHBvcnQgY2xhc3MgTWF0Vm9sdW1lQ29udHJvbENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50ID0gbnVsbDtcblxuICBASW5wdXQoKSBjb2xvcjogVGhlbWVQYWxldHRlID0gXCJwcmltYXJ5XCI7XG5cbiAgQElucHV0KCkgdm9sdW1lID0gMTtcblxuICBAT3V0cHV0KCkgdm9sdW1lQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIEBJbnB1dCgpIG11dGVkID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpIG11dGVkQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBASW5wdXQoKSBrZXlib2FyZCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBldnQ6IEV2ZW50U2VydmljZSkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVNdXRlZChmYWxzZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMubXV0ZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlTXV0ZWQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHNldFZvbHVtZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy52b2x1bWUgPSB2YWx1ZTtcbiAgICB0aGlzLnZpZGVvLnZvbHVtZSA9IHRoaXMudm9sdW1lO1xuICAgIHRoaXMudm9sdW1lQ2hhbmdlZC5lbWl0KHRoaXMudm9sdW1lKTtcblxuICAgIGlmICh0aGlzLnZvbHVtZSA+IDApIHtcbiAgICAgIHRoaXMuc2V0TXV0ZWQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHNldE11dGVkKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubXV0ZWQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnRvZ2dsZU11dGVkKCk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlTXV0ZWQoKTogdm9pZCB7XG4gICAgdGhpcy5tdXRlZCA9ICF0aGlzLm11dGVkO1xuICAgIHRoaXMudXBkYXRlTXV0ZWQoKTtcbiAgfVxuXG4gIHVwZGF0ZU11dGVkKGVtaXRDaGFuZ2U6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmlkZW8pIHtcbiAgICAgIHRoaXMudmlkZW8ubXV0ZWQgPSB0aGlzLm11dGVkO1xuICAgIH1cblxuICAgIGlmIChlbWl0Q2hhbmdlKSB7XG4gICAgICB0aGlzLm11dGVkQ2hhbmdlZC5lbWl0KHRoaXMubXV0ZWQpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoXCJkb2N1bWVudDprZXl1cC5tXCIsIFtcIiRldmVudFwiXSlcbiAgb25NdXRlS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKHRoaXMua2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMudG9nZ2xlTXV0ZWQoKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG4iXX0=