import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, Renderer2, SimpleChanges } from "@angular/core";
import { ThemePalette } from "@angular/material/core";
import { EventService } from "./services/event.service";
import * as ɵngcc0 from '@angular/core';
export declare class MatVideoComponent implements AfterViewInit, OnChanges, OnDestroy {
    private renderer;
    private evt;
    private player;
    private video;
    src: string | MediaStream | MediaSource | Blob;
    title: string;
    autoplay: boolean;
    preload: boolean;
    loop: boolean;
    quality: boolean;
    fullscreen: boolean;
    playsinline: boolean;
    showFrameByFrame: boolean;
    fps: number;
    download: boolean;
    color: ThemePalette;
    spinner: string;
    poster: string;
    keyboard: boolean;
    overlay: boolean;
    muted: boolean;
    mutedChange: EventEmitter<boolean>;
    timeChange: EventEmitter<number>;
    time: number;
    playing: boolean;
    isFullscreen: boolean;
    videoWidth: number;
    videoHeight: number;
    lastTime: number;
    videoLoaded: boolean;
    private srcObjectURL;
    private isMouseMoving;
    private isMouseMovingTimer;
    private isMouseMovingTimeout;
    private events;
    constructor(renderer: Renderer2, evt: EventService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    load(): void;
    getVideoTag(): HTMLVideoElement | null;
    evLoadedMetadata(event: any): void;
    evMouseMove(event: any): void;
    evTimeUpdate(event: any): void;
    getOverlayClass(activeClass: string, inactiveClass: string): any;
    private setVideoSrc;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatVideoComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatVideoComponent, "mat-video", never, { "src": "src"; "title": "title"; "autoplay": "autoplay"; "preload": "preload"; "loop": "loop"; "quality": "quality"; "fullscreen": "fullscreen"; "playsinline": "playsinline"; "showFrameByFrame": "showFrameByFrame"; "fps": "fps"; "download": "download"; "color": "color"; "spinner": "spinner"; "poster": "poster"; "keyboard": "keyboard"; "overlay": "overlay"; "muted": "muted"; "time": "time"; }, { "mutedChange": "mutedChange"; "timeChange": "timeChange"; }, never, ["source", "track"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInZpZGVvLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9jb3JlXCI7XHJcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2V2ZW50LnNlcnZpY2VcIjtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0VmlkZW9Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSBldnQ7XHJcbiAgICBwcml2YXRlIHBsYXllcjtcclxuICAgIHByaXZhdGUgdmlkZW87XHJcbiAgICBzcmM6IHN0cmluZyB8IE1lZGlhU3RyZWFtIHwgTWVkaWFTb3VyY2UgfCBCbG9iO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGF1dG9wbGF5OiBib29sZWFuO1xyXG4gICAgcHJlbG9hZDogYm9vbGVhbjtcclxuICAgIGxvb3A6IGJvb2xlYW47XHJcbiAgICBxdWFsaXR5OiBib29sZWFuO1xyXG4gICAgZnVsbHNjcmVlbjogYm9vbGVhbjtcclxuICAgIHBsYXlzaW5saW5lOiBib29sZWFuO1xyXG4gICAgc2hvd0ZyYW1lQnlGcmFtZTogYm9vbGVhbjtcclxuICAgIGZwczogbnVtYmVyO1xyXG4gICAgZG93bmxvYWQ6IGJvb2xlYW47XHJcbiAgICBjb2xvcjogVGhlbWVQYWxldHRlO1xyXG4gICAgc3Bpbm5lcjogc3RyaW5nO1xyXG4gICAgcG9zdGVyOiBzdHJpbmc7XHJcbiAgICBrZXlib2FyZDogYm9vbGVhbjtcclxuICAgIG92ZXJsYXk6IGJvb2xlYW47XHJcbiAgICBtdXRlZDogYm9vbGVhbjtcclxuICAgIG11dGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICB0aW1lQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICAgIHRpbWU6IG51bWJlcjtcclxuICAgIHBsYXlpbmc6IGJvb2xlYW47XHJcbiAgICBpc0Z1bGxzY3JlZW46IGJvb2xlYW47XHJcbiAgICB2aWRlb1dpZHRoOiBudW1iZXI7XHJcbiAgICB2aWRlb0hlaWdodDogbnVtYmVyO1xyXG4gICAgbGFzdFRpbWU6IG51bWJlcjtcclxuICAgIHZpZGVvTG9hZGVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBzcmNPYmplY3RVUkw7XHJcbiAgICBwcml2YXRlIGlzTW91c2VNb3Zpbmc7XHJcbiAgICBwcml2YXRlIGlzTW91c2VNb3ZpbmdUaW1lcjtcclxuICAgIHByaXZhdGUgaXNNb3VzZU1vdmluZ1RpbWVvdXQ7XHJcbiAgICBwcml2YXRlIGV2ZW50cztcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGV2dDogRXZlbnRTZXJ2aWNlKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgbG9hZCgpOiB2b2lkO1xyXG4gICAgZ2V0VmlkZW9UYWcoKTogSFRNTFZpZGVvRWxlbWVudCB8IG51bGw7XHJcbiAgICBldkxvYWRlZE1ldGFkYXRhKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgZXZNb3VzZU1vdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBldlRpbWVVcGRhdGUoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBnZXRPdmVybGF5Q2xhc3MoYWN0aXZlQ2xhc3M6IHN0cmluZywgaW5hY3RpdmVDbGFzczogc3RyaW5nKTogYW55O1xyXG4gICAgcHJpdmF0ZSBzZXRWaWRlb1NyYztcclxufVxyXG4iXX0=