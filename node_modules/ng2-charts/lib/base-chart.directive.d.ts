import { DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Color } from './color';
import { ThemeService } from './theme.service';
import { ChartConfiguration, ChartDataSets, ChartOptions, ChartPoint, ChartType, PluginServiceGlobalRegistration, PluginServiceRegistrationOptions } from 'chart.js';
import * as ɵngcc0 from '@angular/core';
export declare type SingleDataSet = Array<number | null | undefined | number[]> | ChartPoint[];
export declare type MultiDataSet = SingleDataSet[];
export declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;
export declare type PluginServiceGlobalRegistrationAndOptions = PluginServiceGlobalRegistration & PluginServiceRegistrationOptions;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective implements OnChanges, OnInit, OnDestroy, DoCheck {
    private element;
    private themeService;
    data: SingleOrMultiDataSet;
    datasets: ChartDataSets[];
    labels: Label[];
    options: ChartOptions;
    chartType: ChartType;
    colors: Color[];
    legend: boolean;
    plugins: PluginServiceGlobalRegistrationAndOptions[];
    chartClick: EventEmitter<{
        event?: MouseEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: MouseEvent;
        active: {}[];
    }>;
    ctx: string;
    chart: Chart;
    private old;
    private subs;
    /**
     * Register a plugin.
     */
    static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;
    constructor(element: ElementRef, themeService: ThemeService);
    ngOnInit(): void;
    private themeChanged;
    ngDoCheck(): void;
    copyLabel(a: Label): Label;
    labelsEqual(a: Label, b: Label): boolean;
    copyColor(a: Color): Color;
    colorsEqual(a: Color, b: Color): boolean;
    updateColors(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(duration?: any): {};
    hideDataset(index: number, hidden: boolean): void;
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): ChartConfiguration;
    getChartBuilder(ctx: string): Chart;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseChartDirective, "canvas[baseChart]", ["base-chart"], { "options": "options"; "data": "data"; "datasets": "datasets"; "labels": "labels"; "chartType": "chartType"; "colors": "colors"; "legend": "legend"; "plugins": "plugins"; }, { "chartClick": "chartClick"; "chartHover": "chartHover"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jaGFydC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3InO1xuaW1wb3J0IHsgVGhlbWVTZXJ2aWNlIH0gZnJvbSAnLi90aGVtZS5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXJ0Q29uZmlndXJhdGlvbiwgQ2hhcnREYXRhU2V0cywgQ2hhcnRPcHRpb25zLCBDaGFydFBvaW50LCBDaGFydFR5cGUsIFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb24sIFBsdWdpblNlcnZpY2VSZWdpc3RyYXRpb25PcHRpb25zIH0gZnJvbSAnY2hhcnQuanMnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVEYXRhU2V0ID0gQXJyYXk8bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCB8IG51bWJlcltdPiB8IENoYXJ0UG9pbnRbXTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTXVsdGlEYXRhU2V0ID0gU2luZ2xlRGF0YVNldFtdO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVPck11bHRpRGF0YVNldCA9IFNpbmdsZURhdGFTZXQgfCBNdWx0aURhdGFTZXQ7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zID0gUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbiAmIFBsdWdpblNlcnZpY2VSZWdpc3RyYXRpb25PcHRpb25zO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTaW5nbGVMaW5lTGFiZWwgPSBzdHJpbmc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE11bHRpTGluZUxhYmVsID0gc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSB0eXBlIExhYmVsID0gU2luZ2xlTGluZUxhYmVsIHwgTXVsdGlMaW5lTGFiZWw7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXNlQ2hhcnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0aGVtZVNlcnZpY2U7XG4gICAgZGF0YTogU2luZ2xlT3JNdWx0aURhdGFTZXQ7XG4gICAgZGF0YXNldHM6IENoYXJ0RGF0YVNldHNbXTtcbiAgICBsYWJlbHM6IExhYmVsW107XG4gICAgb3B0aW9uczogQ2hhcnRPcHRpb25zO1xuICAgIGNoYXJ0VHlwZTogQ2hhcnRUeXBlO1xuICAgIGNvbG9yczogQ29sb3JbXTtcbiAgICBsZWdlbmQ6IGJvb2xlYW47XG4gICAgcGx1Z2luczogUGx1Z2luU2VydmljZUdsb2JhbFJlZ2lzdHJhdGlvbkFuZE9wdGlvbnNbXTtcbiAgICBjaGFydENsaWNrOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBldmVudD86IE1vdXNlRXZlbnQ7XG4gICAgICAgIGFjdGl2ZT86IHt9W107XG4gICAgfT47XG4gICAgY2hhcnRIb3ZlcjogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgZXZlbnQ6IE1vdXNlRXZlbnQ7XG4gICAgICAgIGFjdGl2ZToge31bXTtcbiAgICB9PjtcbiAgICBjdHg6IHN0cmluZztcbiAgICBjaGFydDogQ2hhcnQ7XG4gICAgcHJpdmF0ZSBvbGQ7XG4gICAgcHJpdmF0ZSBzdWJzO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgICAqL1xuICAgIHN0YXRpYyByZWdpc3RlclBsdWdpbihwbHVnaW46IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zKTogdm9pZDtcbiAgICBzdGF0aWMgdW5yZWdpc3RlclBsdWdpbihwbHVnaW46IFBsdWdpblNlcnZpY2VHbG9iYWxSZWdpc3RyYXRpb25BbmRPcHRpb25zKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCB0aGVtZVNlcnZpY2U6IFRoZW1lU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHRoZW1lQ2hhbmdlZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBjb3B5TGFiZWwoYTogTGFiZWwpOiBMYWJlbDtcbiAgICBsYWJlbHNFcXVhbChhOiBMYWJlbCwgYjogTGFiZWwpOiBib29sZWFuO1xuICAgIGNvcHlDb2xvcihhOiBDb2xvcik6IENvbG9yO1xuICAgIGNvbG9yc0VxdWFsKGE6IENvbG9yLCBiOiBDb2xvcik6IGJvb2xlYW47XG4gICAgdXBkYXRlQ29sb3JzKCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB1cGRhdGUoZHVyYXRpb24/OiBhbnkpOiB7fTtcbiAgICBoaWRlRGF0YXNldChpbmRleDogbnVtYmVyLCBoaWRkZW46IGJvb2xlYW4pOiB2b2lkO1xuICAgIGlzRGF0YXNldEhpZGRlbihpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICB0b0Jhc2U2NEltYWdlKCk6IHN0cmluZztcbiAgICBnZXRDaGFydENvbmZpZ3VyYXRpb24oKTogQ2hhcnRDb25maWd1cmF0aW9uO1xuICAgIGdldENoYXJ0QnVpbGRlcihjdHg6IHN0cmluZyk6IENoYXJ0O1xuICAgIHNtYXJ0TWVyZ2Uob3B0aW9uczogYW55LCBvdmVycmlkZXM6IGFueSwgbGV2ZWw/OiBudW1iZXIpOiBhbnk7XG4gICAgcHJpdmF0ZSBpc011bHRpTGluZUxhYmVsO1xuICAgIHByaXZhdGUgam9pbkxhYmVsO1xuICAgIHByaXZhdGUgcHJvcGFnYXRlRGF0YXNldHNUb0RhdGE7XG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVEYXRhVG9EYXRhc2V0cztcbiAgICBwcml2YXRlIGlzTXVsdGlEYXRhU2V0O1xuICAgIHByaXZhdGUgZ2V0RGF0YXNldHM7XG4gICAgcHJpdmF0ZSByZWZyZXNoO1xufVxuIl19