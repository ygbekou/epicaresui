import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FormBuilder, FormGroup } from '@angular/forms';
import { InputFile } from '../../interfaces/input-file';
import { InputFileRejected } from '../../interfaces/input-file-rejected';
import { InputFileService } from '../../services/input-file.service';
import { MatButton } from '@angular/material/button';
import * as ɵngcc0 from '@angular/core';
export declare class InputFileComponent implements ControlValueAccessor, OnInit {
    private formBuilder;
    private inputFileService;
    static nextId: number;
    private _classAnimation;
    private _fileAccept;
    private _fileLimit;
    private _iconAdd;
    private _iconDelete;
    private _iconFile;
    private _iconLink;
    private _linkEnabled;
    private _placeholderLink;
    private _sizeLimit;
    disabled: boolean;
    placeholder: string;
    classAnimation: string;
    fileAccept: string;
    fileLimit: number;
    iconAdd: string;
    iconDelete: string;
    iconFile: string;
    iconLink: string;
    linkEnabled: boolean;
    placeholderLink: string;
    sizeLimit: number;
    acceptedFile: EventEmitter<InputFile>;
    deletedFile: EventEmitter<InputFile>;
    rejectedFile: EventEmitter<InputFileRejected>;
    fileInput: ElementRef;
    addLink: boolean;
    files: InputFile[];
    form: FormGroup;
    id: string;
    onChange: (files: InputFile[]) => void;
    onTouched: () => void;
    readonly canAddFile: boolean;
    constructor(formBuilder: FormBuilder, inputFileService: InputFileService);
    /**
     * Angular lifecyle OnInit implementation.
     */
    ngOnInit(): void;
    /**
     * On delete a file event handler.
     * @param index
     */
    onDeleteFile(index: number): void;
    /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     */
    onDragOver(button: MatButton): void;
    /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     */
    onDragLeave(button: MatButton): void;
    /**
     * On adds a link.
     */
    onLink(): void;
    /**
     * On replace one file event handler.
     * Writes the value.
     * @param fileList
     * @param index
     * @param fileInput
     */
    onReplaceFile(fileList: FileList, index: number, button: MatButton, fileInput?: HTMLInputElement): void;
    /**
     * On select one or more files event handler.
     * Writes the value.
     * @param fileList
     */
    onSelectFile(fileList: FileList, button: MatButton): void;
    /**
     * On submit the link form event handler.
     */
    onSubmitLink(): void;
    /**
     * Implementation of ControlValueAccessor.
     * @param fn
     */
    registerOnChange(fn: (files: Array<InputFile>) => void): void;
    /**
     * Implementation of ControlValueAccessor.
     * @param fn
     */
    registerOnTouched(fn: () => void): void;
    /**
     * Implementation of ControlValueAccessor.
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Implementation of ControlValueAccessor.
     * @param files
     */
    writeValue(files: Array<InputFile>): void;
    /**
     * Whether the file can be added to the model.
     * @param files
     * @param file,
     * @param bypassLimit
     */
    private fileGuard;
    /**
     * Sets the file preview with FileReader.
     */
    private setFilePreview;
    /**
     * Sets the reactive form to insert a link.
     */
    private setForm;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputFileComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputFileComponent, "input-file", never, { "classAnimation": "classAnimation"; "fileAccept": "fileAccept"; "fileLimit": "fileLimit"; "iconAdd": "iconAdd"; "iconDelete": "iconDelete"; "iconFile": "iconFile"; "iconLink": "iconLink"; "linkEnabled": "linkEnabled"; "placeholderLink": "placeholderLink"; "sizeLimit": "sizeLimit"; "disabled": "disabled"; "placeholder": "placeholder"; }, { "acceptedFile": "acceptedFile"; "deletedFile": "deletedFile"; "rejectedFile": "rejectedFile"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZmlsZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW5wdXQtZmlsZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElucHV0RmlsZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaW5wdXQtZmlsZSc7XG5pbXBvcnQgeyBJbnB1dEZpbGVSZWplY3RlZCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaW5wdXQtZmlsZS1yZWplY3RlZCc7XG5pbXBvcnQgeyBJbnB1dEZpbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaW5wdXQtZmlsZS5zZXJ2aWNlJztcbmltcG9ydCB7IE1hdEJ1dHRvbiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnB1dEZpbGVDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0IHtcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyO1xuICAgIHByaXZhdGUgaW5wdXRGaWxlU2VydmljZTtcbiAgICBzdGF0aWMgbmV4dElkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfY2xhc3NBbmltYXRpb247XG4gICAgcHJpdmF0ZSBfZmlsZUFjY2VwdDtcbiAgICBwcml2YXRlIF9maWxlTGltaXQ7XG4gICAgcHJpdmF0ZSBfaWNvbkFkZDtcbiAgICBwcml2YXRlIF9pY29uRGVsZXRlO1xuICAgIHByaXZhdGUgX2ljb25GaWxlO1xuICAgIHByaXZhdGUgX2ljb25MaW5rO1xuICAgIHByaXZhdGUgX2xpbmtFbmFibGVkO1xuICAgIHByaXZhdGUgX3BsYWNlaG9sZGVyTGluaztcbiAgICBwcml2YXRlIF9zaXplTGltaXQ7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBjbGFzc0FuaW1hdGlvbjogc3RyaW5nO1xuICAgIGZpbGVBY2NlcHQ6IHN0cmluZztcbiAgICBmaWxlTGltaXQ6IG51bWJlcjtcbiAgICBpY29uQWRkOiBzdHJpbmc7XG4gICAgaWNvbkRlbGV0ZTogc3RyaW5nO1xuICAgIGljb25GaWxlOiBzdHJpbmc7XG4gICAgaWNvbkxpbms6IHN0cmluZztcbiAgICBsaW5rRW5hYmxlZDogYm9vbGVhbjtcbiAgICBwbGFjZWhvbGRlckxpbms6IHN0cmluZztcbiAgICBzaXplTGltaXQ6IG51bWJlcjtcbiAgICBhY2NlcHRlZEZpbGU6IEV2ZW50RW1pdHRlcjxJbnB1dEZpbGU+O1xuICAgIGRlbGV0ZWRGaWxlOiBFdmVudEVtaXR0ZXI8SW5wdXRGaWxlPjtcbiAgICByZWplY3RlZEZpbGU6IEV2ZW50RW1pdHRlcjxJbnB1dEZpbGVSZWplY3RlZD47XG4gICAgZmlsZUlucHV0OiBFbGVtZW50UmVmO1xuICAgIGFkZExpbms6IGJvb2xlYW47XG4gICAgZmlsZXM6IElucHV0RmlsZVtdO1xuICAgIGZvcm06IEZvcm1Hcm91cDtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9uQ2hhbmdlOiAoZmlsZXM6IElucHV0RmlsZVtdKSA9PiB2b2lkO1xuICAgIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICByZWFkb25seSBjYW5BZGRGaWxlOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlciwgaW5wdXRGaWxlU2VydmljZTogSW5wdXRGaWxlU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQW5ndWxhciBsaWZlY3lsZSBPbkluaXQgaW1wbGVtZW50YXRpb24uXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBkZWxldGUgYSBmaWxlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICovXG4gICAgb25EZWxldGVGaWxlKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGRyYWcgb3ZlciBldmVudCBoYW5kbGVyLlxuICAgICAqIEFkZHMgYSByaXBwbGUgZWZmZWN0IG9uIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgb25EcmFnT3ZlcihidXR0b246IE1hdEJ1dHRvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gZHJhZyBsZWF2ZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEZhZGVzIHRoZSByaXBwbGUgZWZmZWN0IG9mIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgb25EcmFnTGVhdmUoYnV0dG9uOiBNYXRCdXR0b24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGFkZHMgYSBsaW5rLlxuICAgICAqL1xuICAgIG9uTGluaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIHJlcGxhY2Ugb25lIGZpbGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBXcml0ZXMgdGhlIHZhbHVlLlxuICAgICAqIEBwYXJhbSBmaWxlTGlzdFxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEBwYXJhbSBmaWxlSW5wdXRcbiAgICAgKi9cbiAgICBvblJlcGxhY2VGaWxlKGZpbGVMaXN0OiBGaWxlTGlzdCwgaW5kZXg6IG51bWJlciwgYnV0dG9uOiBNYXRCdXR0b24sIGZpbGVJbnB1dD86IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIHNlbGVjdCBvbmUgb3IgbW9yZSBmaWxlcyBldmVudCBoYW5kbGVyLlxuICAgICAqIFdyaXRlcyB0aGUgdmFsdWUuXG4gICAgICogQHBhcmFtIGZpbGVMaXN0XG4gICAgICovXG4gICAgb25TZWxlY3RGaWxlKGZpbGVMaXN0OiBGaWxlTGlzdCwgYnV0dG9uOiBNYXRCdXR0b24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIHN1Ym1pdCB0aGUgbGluayBmb3JtIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgb25TdWJtaXRMaW5rKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgQ29udHJvbFZhbHVlQWNjZXNzb3IuXG4gICAgICogQHBhcmFtIGZuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKGZpbGVzOiBBcnJheTxJbnB1dEZpbGU+KSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiBDb250cm9sVmFsdWVBY2Nlc3Nvci5cbiAgICAgKiBAcGFyYW0gZm5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgQ29udHJvbFZhbHVlQWNjZXNzb3IuXG4gICAgICogQHBhcmFtIGlzRGlzYWJsZWRcbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudGF0aW9uIG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yLlxuICAgICAqIEBwYXJhbSBmaWxlc1xuICAgICAqL1xuICAgIHdyaXRlVmFsdWUoZmlsZXM6IEFycmF5PElucHV0RmlsZT4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGZpbGUgY2FuIGJlIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAgICAgKiBAcGFyYW0gZmlsZXNcbiAgICAgKiBAcGFyYW0gZmlsZSxcbiAgICAgKiBAcGFyYW0gYnlwYXNzTGltaXRcbiAgICAgKi9cbiAgICBwcml2YXRlIGZpbGVHdWFyZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWxlIHByZXZpZXcgd2l0aCBGaWxlUmVhZGVyLlxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0RmlsZVByZXZpZXc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVhY3RpdmUgZm9ybSB0byBpbnNlcnQgYSBsaW5rLlxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Rm9ybTtcbn1cbiJdfQ==