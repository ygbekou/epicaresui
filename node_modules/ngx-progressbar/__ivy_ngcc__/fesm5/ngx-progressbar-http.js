import { __assign, __decorate, __param } from 'tslib';
import { InjectionToken, Optional, Inject, Injectable, NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { finalize } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-progressbar';
var NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');

var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? __assign(__assign({}, this._config), config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    NgProgressInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        }));
    };
    /**
     * Check if request is silent.
     * @param req request
     */
    NgProgressInterceptor.prototype.checkUrl = function (req) {
        var url = req.url.toLowerCase();
        var found = this._config.silentApis.find(function (u) { return url.startsWith(u); });
        return !!found;
    };
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };
    NgProgressInterceptor = __decorate([ __param(1, Optional()), __param(1, Inject(NG_PROGRESS_HTTP_CONFIG))
    ], NgProgressInterceptor);
NgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) { return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8)); };
NgProgressInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgressInterceptor, factory: function (t) { return NgProgressInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_HTTP_CONFIG]
            }] }]; }, null); })();
    return NgProgressInterceptor;
}());

var NgProgressHttpModule = /** @class */ (function () {
    function NgProgressHttpModule() {
    }
    NgProgressHttpModule_1 = NgProgressHttpModule;
    NgProgressHttpModule.withConfig = function (config) {
        return {
            ngModule: NgProgressHttpModule_1,
            providers: [
                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
            ]
        };
    };
    var NgProgressHttpModule_1;
NgProgressHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressHttpModule });
NgProgressHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgProgressHttpModule_Factory(t) { return new (t || NgProgressHttpModule)(); }, providers: [
        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressHttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                ]
            }]
    }], function () { return []; }, null); })();
    return NgProgressHttpModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule, NgProgressInterceptor as ɵa };

//# sourceMappingURL=ngx-progressbar-http.js.map