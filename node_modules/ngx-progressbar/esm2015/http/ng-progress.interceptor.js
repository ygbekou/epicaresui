import { __decorate, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress, NgProgressRef } from 'ngx-progressbar';
// import { NgProgress, NgProgressRef } from '../../src/public-api';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
let NgProgressInterceptor = class NgProgressInterceptor {
    constructor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(() => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        }));
    }
    /**
     * Check if request is silent.
     * @param req request
     */
    checkUrl(req) {
        const url = req.url.toLowerCase();
        const found = this._config.silentApis.find((u) => url.startsWith(u));
        return !!found;
    }
};
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
NgProgressInterceptor = __decorate([
    Injectable(),
    __param(1, Optional()), __param(1, Inject(NG_PROGRESS_HTTP_CONFIG))
], NgProgressInterceptor);
export { NgProgressInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NiYXIvaHR0cC8iLCJzb3VyY2VzIjpbIm5nLXByb2dyZXNzLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUQsb0VBQW9FO0FBQ3BFLE9BQU8sRUFBd0IsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUc3RixJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQVNoQyxZQUFZLFVBQXNCLEVBQStDLE1BQTZCO1FBUHRHLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUVaLFlBQU8sR0FBeUI7WUFDL0MsRUFBRSxFQUFFLE1BQU07WUFDVixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7UUFHQSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLGlDQUFLLElBQUksQ0FBQyxPQUFPLEdBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUVoRCw0QkFBNEI7UUFDNUIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkY7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzNCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUSxDQUFDLEdBQXFCO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFBOztZQTFDeUIsVUFBVTs0Q0FBRyxRQUFRLFlBQUksTUFBTSxTQUFDLHVCQUF1Qjs7QUFUcEUscUJBQXFCO0lBRGpDLFVBQVUsRUFBRTtJQVUwQixXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtHQVRyRSxxQkFBcUIsQ0FtRGpDO1NBbkRZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3MsIE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICduZ3gtcHJvZ3Jlc3NiYXInO1xuLy8gaW1wb3J0IHsgTmdQcm9ncmVzcywgTmdQcm9ncmVzc1JlZiB9IGZyb20gJy4uLy4uL3NyYy9wdWJsaWMtYXBpJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnLCBOR19QUk9HUkVTU19IVFRQX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MtaHR0cC5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc0ludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBwcml2YXRlIF9pblByb2dyZXNzQ291bnQgPSAwO1xuICBwcml2YXRlIF9wcm9ncmVzc1JlZjogTmdQcm9ncmVzc1JlZjtcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBOZ1Byb2dyZXNzSHR0cENvbmZpZyA9IHtcbiAgICBpZDogJ3Jvb3QnLFxuICAgIHNpbGVudEFwaXM6IFtdXG4gIH07XG5cbiAgY29uc3RydWN0b3IobmdQcm9ncmVzczogTmdQcm9ncmVzcywgQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19IVFRQX0NPTkZJRykgY29uZmlnPzogTmdQcm9ncmVzc0h0dHBDb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWcgPyB7Li4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9IDogdGhpcy5fY29uZmlnO1xuICAgIHRoaXMuX3Byb2dyZXNzUmVmID0gbmdQcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuXG4gICAgLy8gSWdub3JlIGJ5IHJlcXVlc3QgaGVhZGVyc1xuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZVByb2dyZXNzQmFyJykpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEuY2xvbmUoe2hlYWRlcnM6IHJlcS5oZWFkZXJzLmRlbGV0ZSgnaWdub3JlUHJvZ3Jlc3NCYXInKX0pKTtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgc2lsZW50IGFwaSByZXF1ZXN0c1xuICAgIGlmICh0aGlzLmNoZWNrVXJsKHJlcSkpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudCsrO1xuXG4gICAgaWYgKCF0aGlzLl9wcm9ncmVzc1JlZi5pc1N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50LS07XG4gICAgICAgIGlmICh0aGlzLl9pblByb2dyZXNzQ291bnQgPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9wcm9ncmVzc1JlZi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgcmVxdWVzdCBpcyBzaWxlbnQuXG4gICAqIEBwYXJhbSByZXEgcmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBjaGVja1VybChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pIHtcbiAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZm91bmQgPSB0aGlzLl9jb25maWcuc2lsZW50QXBpcy5maW5kKCh1KSA9PiB1cmwuc3RhcnRzV2l0aCh1KSk7XG4gICAgcmV0dXJuICEhZm91bmQ7XG4gIH1cbn1cbiJdfQ==