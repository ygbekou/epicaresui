import { OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { NgProgress } from './ng-progress.service';
import { NgProgressRef } from './ng-progress-ref';
import * as ɵngcc0 from '@angular/core';
export declare class NgProgressComponent implements OnInit, OnChanges, OnDestroy {
    private _ngProgress;
    private _started;
    private _completed;
    /** Progress bar worker */
    progressRef: NgProgressRef;
    /** Stream that emits progress state */
    state$: Observable<{
        active: boolean;
        transform: string;
    }>;
    /** Creates a new instance if id is not already exists */
    id: string;
    /** Initializes inputs from the global config */
    min: number;
    max: number;
    ease: string;
    color: string;
    speed: number;
    thick: boolean;
    fixed: boolean;
    meteor: boolean;
    spinner: boolean;
    trickleSpeed: number;
    debounceTime: number;
    trickleFunc: (n: number) => number;
    spinnerPosition: 'left' | 'right';
    direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';
    started: EventEmitter<any>;
    completed: EventEmitter<any>;
    get isStarted(): boolean;
    constructor(_ngProgress: NgProgress);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    start(): void;
    complete(): void;
    inc(n?: number): void;
    set(n: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgProgressComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgProgressComponent, "ng-progress", never, { "id": "id"; "min": "min"; "max": "max"; "ease": "ease"; "color": "color"; "speed": "speed"; "thick": "thick"; "fixed": "fixed"; "meteor": "meteor"; "spinner": "spinner"; "trickleSpeed": "trickleSpeed"; "debounceTime": "debounceTime"; "trickleFunc": "trickleFunc"; "spinnerPosition": "spinnerPosition"; "direction": "direction"; }, { "started": "started"; "completed": "completed"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5nLXByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3MgfSBmcm9tICcuL25nLXByb2dyZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmdQcm9ncmVzc1JlZiB9IGZyb20gJy4vbmctcHJvZ3Jlc3MtcmVmJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nUHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9uZ1Byb2dyZXNzO1xuICAgIHByaXZhdGUgX3N0YXJ0ZWQ7XG4gICAgcHJpdmF0ZSBfY29tcGxldGVkO1xuICAgIC8qKiBQcm9ncmVzcyBiYXIgd29ya2VyICovXG4gICAgcHJvZ3Jlc3NSZWY6IE5nUHJvZ3Jlc3NSZWY7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHByb2dyZXNzIHN0YXRlICovXG4gICAgc3RhdGUkOiBPYnNlcnZhYmxlPHtcbiAgICAgICAgYWN0aXZlOiBib29sZWFuO1xuICAgICAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICB9PjtcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpZiBpZCBpcyBub3QgYWxyZWFkeSBleGlzdHMgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKiBJbml0aWFsaXplcyBpbnB1dHMgZnJvbSB0aGUgZ2xvYmFsIGNvbmZpZyAqL1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGVhc2U6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIHNwZWVkOiBudW1iZXI7XG4gICAgdGhpY2s6IGJvb2xlYW47XG4gICAgZml4ZWQ6IGJvb2xlYW47XG4gICAgbWV0ZW9yOiBib29sZWFuO1xuICAgIHNwaW5uZXI6IGJvb2xlYW47XG4gICAgdHJpY2tsZVNwZWVkOiBudW1iZXI7XG4gICAgZGVib3VuY2VUaW1lOiBudW1iZXI7XG4gICAgdHJpY2tsZUZ1bmM6IChuOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBzcGlubmVyUG9zaXRpb246ICdsZWZ0JyB8ICdyaWdodCc7XG4gICAgZGlyZWN0aW9uOiAnbHRyKycgfCAnbHRyLScgfCAncnRsKycgfCAncnRsLSc7XG4gICAgc3RhcnRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29tcGxldGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBnZXQgaXNTdGFydGVkKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoX25nUHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MpO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHN0YXJ0KCk6IHZvaWQ7XG4gICAgY29tcGxldGUoKTogdm9pZDtcbiAgICBpbmMobj86IG51bWJlcik6IHZvaWQ7XG4gICAgc2V0KG46IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=