import { DomSanitizer } from '@angular/platform-browser';
import { QuillModules, CustomOption, CustomModule } from './quill-editor.interfaces';
import QuillType, { Delta } from 'quill';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { QuillService } from './quill.service';
import * as ɵngcc0 from '@angular/core';
export interface Range {
    index: number;
    length: number;
}
export interface ContentChange {
    content: any;
    delta: Delta;
    editor: QuillType;
    html: string | null;
    oldDelta: Delta;
    source: string;
    text: string;
}
export interface SelectionChange {
    editor: QuillType;
    oldRange: Range | null;
    range: Range | null;
    source: string;
}
export interface Blur {
    editor: QuillType;
    source: string;
}
export interface Focus {
    editor: QuillType;
    source: string;
}
export declare type EditorChangeContent = ContentChange & {
    event: 'text-change';
};
export declare type EditorChangeSelection = SelectionChange & {
    event: 'selection-change';
};
export declare abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    elementRef: ElementRef;
    protected domSanitizer: DomSanitizer;
    protected doc: any;
    protected platformId: any;
    protected renderer: Renderer2;
    protected zone: NgZone;
    protected service: QuillService;
    quillEditor: QuillType;
    editorElem: HTMLElement;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    customModules: CustomModule[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    trimOnValidation: boolean;
    onEditorCreated: EventEmitter<any>;
    onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection>;
    onContentChanged: EventEmitter<ContentChange>;
    onSelectionChanged: EventEmitter<SelectionChange>;
    onFocus: EventEmitter<Focus>;
    onBlur: EventEmitter<Blur>;
    disabled: boolean;
    onModelChange: (modelValue?: any) => void;
    onModelTouched: () => void;
    onValidatorChanged: () => void;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, service: QuillService);
    static normalizeClassNames(classes: string): string[];
    valueGetter: (quillEditor: QuillType, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: QuillType, value: any) => any;
    ngAfterViewInit(): Promise<void>;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: Delta, oldDelta: Delta, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<QuillEditorBase, never, never, { "required": "required"; "customToolbarPosition": "customToolbarPosition"; "sanitize": "sanitize"; "styles": "styles"; "strict": "strict"; "customOptions": "customOptions"; "customModules": "customModules"; "preserveWhitespace": "preserveWhitespace"; "trimOnValidation": "trimOnValidation"; "valueGetter": "valueGetter"; "valueSetter": "valueSetter"; "format": "format"; "theme": "theme"; "modules": "modules"; "debug": "debug"; "readOnly": "readOnly"; "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "formats": "formats"; "scrollingContainer": "scrollingContainer"; "bounds": "bounds"; "trackChanges": "trackChanges"; "classes": "classes"; }, { "onEditorCreated": "onEditorCreated"; "onEditorChanged": "onEditorChanged"; "onContentChanged": "onContentChanged"; "onSelectionChanged": "onSelectionChanged"; "onFocus": "onFocus"; "onBlur": "onBlur"; }, never>;
}
export declare class QuillEditorComponent extends QuillEditorBase {
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, service: QuillService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, {}, {}, never, ["[quill-editor-toolbar]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBRdWlsbE1vZHVsZXMsIEN1c3RvbU9wdGlvbiwgQ3VzdG9tTW9kdWxlIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcyc7XG5pbXBvcnQgUXVpbGxUeXBlLCB7IERlbHRhIH0gZnJvbSAncXVpbGwnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBRdWlsbFNlcnZpY2UgfSBmcm9tICcuL3F1aWxsLnNlcnZpY2UnO1xuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBsZW5ndGg6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudENoYW5nZSB7XG4gICAgY29udGVudDogYW55O1xuICAgIGRlbHRhOiBEZWx0YTtcbiAgICBlZGl0b3I6IFF1aWxsVHlwZTtcbiAgICBodG1sOiBzdHJpbmcgfCBudWxsO1xuICAgIG9sZERlbHRhOiBEZWx0YTtcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvbkNoYW5nZSB7XG4gICAgZWRpdG9yOiBRdWlsbFR5cGU7XG4gICAgb2xkUmFuZ2U6IFJhbmdlIHwgbnVsbDtcbiAgICByYW5nZTogUmFuZ2UgfCBudWxsO1xuICAgIHNvdXJjZTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBCbHVyIHtcbiAgICBlZGl0b3I6IFF1aWxsVHlwZTtcbiAgICBzb3VyY2U6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9jdXMge1xuICAgIGVkaXRvcjogUXVpbGxUeXBlO1xuICAgIHNvdXJjZTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgdHlwZSBFZGl0b3JDaGFuZ2VDb250ZW50ID0gQ29udGVudENoYW5nZSAmIHtcbiAgICBldmVudDogJ3RleHQtY2hhbmdlJztcbn07XG5leHBvcnQgZGVjbGFyZSB0eXBlIEVkaXRvckNoYW5nZVNlbGVjdGlvbiA9IFNlbGVjdGlvbkNoYW5nZSAmIHtcbiAgICBldmVudDogJ3NlbGVjdGlvbi1jaGFuZ2UnO1xufTtcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFF1aWxsRWRpdG9yQmFzZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgVmFsaWRhdG9yIHtcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICBwcm90ZWN0ZWQgZG9jOiBhbnk7XG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lO1xuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBRdWlsbFNlcnZpY2U7XG4gICAgcXVpbGxFZGl0b3I6IFF1aWxsVHlwZTtcbiAgICBlZGl0b3JFbGVtOiBIVE1MRWxlbWVudDtcbiAgICBjb250ZW50OiBhbnk7XG4gICAgZm9ybWF0PzogJ29iamVjdCcgfCAnaHRtbCcgfCAndGV4dCcgfCAnanNvbic7XG4gICAgdGhlbWU/OiBzdHJpbmc7XG4gICAgbW9kdWxlcz86IFF1aWxsTW9kdWxlcztcbiAgICBkZWJ1Zz86ICd3YXJuJyB8ICdsb2cnIHwgJ2Vycm9yJyB8IGZhbHNlO1xuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIGZvcm1hdHM/OiBzdHJpbmdbXSB8IG51bGw7XG4gICAgY3VzdG9tVG9vbGJhclBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nO1xuICAgIHNhbml0aXplOiBib29sZWFuO1xuICAgIHN0eWxlczogYW55O1xuICAgIHN0cmljdDogYm9vbGVhbjtcbiAgICBzY3JvbGxpbmdDb250YWluZXI/OiBIVE1MRWxlbWVudCB8IHN0cmluZyB8IG51bGw7XG4gICAgYm91bmRzPzogSFRNTEVsZW1lbnQgfCBzdHJpbmc7XG4gICAgY3VzdG9tT3B0aW9uczogQ3VzdG9tT3B0aW9uW107XG4gICAgY3VzdG9tTW9kdWxlczogQ3VzdG9tTW9kdWxlW107XG4gICAgdHJhY2tDaGFuZ2VzPzogJ3VzZXInIHwgJ2FsbCc7XG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlOiBib29sZWFuO1xuICAgIGNsYXNzZXM/OiBzdHJpbmc7XG4gICAgdHJpbU9uVmFsaWRhdGlvbjogYm9vbGVhbjtcbiAgICBvbkVkaXRvckNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRWRpdG9yQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEVkaXRvckNoYW5nZUNvbnRlbnQgfCBFZGl0b3JDaGFuZ2VTZWxlY3Rpb24+O1xuICAgIG9uQ29udGVudENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDb250ZW50Q2hhbmdlPjtcbiAgICBvblNlbGVjdGlvbkNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxTZWxlY3Rpb25DaGFuZ2U+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxGb2N1cz47XG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8Qmx1cj47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgb25Nb2RlbENoYW5nZTogKG1vZGVsVmFsdWU/OiBhbnkpID0+IHZvaWQ7XG4gICAgb25Nb2RlbFRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgb25WYWxpZGF0b3JDaGFuZ2VkOiAoKSA9PiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBkb2M6IGFueSwgcGxhdGZvcm1JZDogYW55LCByZW5kZXJlcjogUmVuZGVyZXIyLCB6b25lOiBOZ1pvbmUsIHNlcnZpY2U6IFF1aWxsU2VydmljZSk7XG4gICAgc3RhdGljIG5vcm1hbGl6ZUNsYXNzTmFtZXMoY2xhc3Nlczogc3RyaW5nKTogc3RyaW5nW107XG4gICAgdmFsdWVHZXR0ZXI6IChxdWlsbEVkaXRvcjogUXVpbGxUeXBlLCBlZGl0b3JFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gYW55O1xuICAgIHZhbHVlU2V0dGVyOiAocXVpbGxFZGl0b3I6IFF1aWxsVHlwZSwgdmFsdWU6IGFueSkgPT4gYW55O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNlbGVjdGlvbkNoYW5nZUhhbmRsZXI6IChyYW5nZTogUmFuZ2UsIG9sZFJhbmdlOiBSYW5nZSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgdGV4dENoYW5nZUhhbmRsZXI6IChkZWx0YTogRGVsdGEsIG9sZERlbHRhOiBEZWx0YSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgZWRpdG9yQ2hhbmdlSGFuZGxlcjogKGV2ZW50OiBcInRleHQtY2hhbmdlXCIgfCBcInNlbGVjdGlvbi1jaGFuZ2VcIiwgY3VycmVudDogYW55LCBvbGQ6IGFueSwgc291cmNlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBhZGRDbGFzc2VzKGNsYXNzTGlzdDogc3RyaW5nKTogdm9pZDtcbiAgICByZW1vdmVDbGFzc2VzKGNsYXNzTGlzdDogc3RyaW5nKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKGN1cnJlbnRWYWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ/OiBib29sZWFuKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAobW9kZWxWYWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoKToge1xuICAgICAgICBtaW5MZW5ndGhFcnJvcj86IHtcbiAgICAgICAgICAgIGdpdmVuOiBudW1iZXI7XG4gICAgICAgICAgICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgbWF4TGVuZ3RoRXJyb3I/OiB7XG4gICAgICAgICAgICBnaXZlbjogbnVtYmVyO1xuICAgICAgICAgICAgbWF4TGVuZ3RoOiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVpcmVkRXJyb3I/OiB7XG4gICAgICAgICAgICBlbXB0eTogYm9vbGVhbjtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUXVpbGxFZGl0b3JDb21wb25lbnQgZXh0ZW5kcyBRdWlsbEVkaXRvckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBkb2M6IGFueSwgcGxhdGZvcm1JZDogYW55LCByZW5kZXJlcjogUmVuZGVyZXIyLCB6b25lOiBOZ1pvbmUsIHNlcnZpY2U6IFF1aWxsU2VydmljZSk7XG59XG4iXX0=